// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  branch: (where?: BranchWhereInput) => Promise<boolean>;
  campus: (where?: CampusWhereInput) => Promise<boolean>;
  course: (where?: CourseWhereInput) => Promise<boolean>;
  courseInstance: (where?: CourseInstanceWhereInput) => Promise<boolean>;
  global: (where?: GlobalWhereInput) => Promise<boolean>;
  problem: (where?: ProblemWhereInput) => Promise<boolean>;
  question: (where?: QuestionWhereInput) => Promise<boolean>;
  recovery: (where?: RecoveryWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  branch: (where: BranchWhereUniqueInput) => BranchNullablePromise;
  branches: (args?: {
    where?: BranchWhereInput;
    orderBy?: BranchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Branch>;
  branchesConnection: (args?: {
    where?: BranchWhereInput;
    orderBy?: BranchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BranchConnectionPromise;
  campus: (where: CampusWhereUniqueInput) => CampusNullablePromise;
  campuses: (args?: {
    where?: CampusWhereInput;
    orderBy?: CampusOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Campus>;
  campusesConnection: (args?: {
    where?: CampusWhereInput;
    orderBy?: CampusOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CampusConnectionPromise;
  course: (where: CourseWhereUniqueInput) => CourseNullablePromise;
  courses: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Course>;
  coursesConnection: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CourseConnectionPromise;
  courseInstance: (
    where: CourseInstanceWhereUniqueInput
  ) => CourseInstanceNullablePromise;
  courseInstances: (args?: {
    where?: CourseInstanceWhereInput;
    orderBy?: CourseInstanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CourseInstance>;
  courseInstancesConnection: (args?: {
    where?: CourseInstanceWhereInput;
    orderBy?: CourseInstanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CourseInstanceConnectionPromise;
  global: (where: GlobalWhereUniqueInput) => GlobalNullablePromise;
  globals: (args?: {
    where?: GlobalWhereInput;
    orderBy?: GlobalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Global>;
  globalsConnection: (args?: {
    where?: GlobalWhereInput;
    orderBy?: GlobalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GlobalConnectionPromise;
  problem: (where: ProblemWhereUniqueInput) => ProblemNullablePromise;
  problems: (args?: {
    where?: ProblemWhereInput;
    orderBy?: ProblemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Problem>;
  problemsConnection: (args?: {
    where?: ProblemWhereInput;
    orderBy?: ProblemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProblemConnectionPromise;
  question: (where: QuestionWhereUniqueInput) => QuestionNullablePromise;
  questions: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Question>;
  questionsConnection: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuestionConnectionPromise;
  recovery: (where: RecoveryWhereUniqueInput) => RecoveryNullablePromise;
  recoveries: (args?: {
    where?: RecoveryWhereInput;
    orderBy?: RecoveryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Recovery>;
  recoveriesConnection: (args?: {
    where?: RecoveryWhereInput;
    orderBy?: RecoveryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RecoveryConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBranch: (data: BranchCreateInput) => BranchPromise;
  updateBranch: (args: {
    data: BranchUpdateInput;
    where: BranchWhereUniqueInput;
  }) => BranchPromise;
  updateManyBranches: (args: {
    data: BranchUpdateManyMutationInput;
    where?: BranchWhereInput;
  }) => BatchPayloadPromise;
  upsertBranch: (args: {
    where: BranchWhereUniqueInput;
    create: BranchCreateInput;
    update: BranchUpdateInput;
  }) => BranchPromise;
  deleteBranch: (where: BranchWhereUniqueInput) => BranchPromise;
  deleteManyBranches: (where?: BranchWhereInput) => BatchPayloadPromise;
  createCampus: (data: CampusCreateInput) => CampusPromise;
  updateCampus: (args: {
    data: CampusUpdateInput;
    where: CampusWhereUniqueInput;
  }) => CampusPromise;
  updateManyCampuses: (args: {
    data: CampusUpdateManyMutationInput;
    where?: CampusWhereInput;
  }) => BatchPayloadPromise;
  upsertCampus: (args: {
    where: CampusWhereUniqueInput;
    create: CampusCreateInput;
    update: CampusUpdateInput;
  }) => CampusPromise;
  deleteCampus: (where: CampusWhereUniqueInput) => CampusPromise;
  deleteManyCampuses: (where?: CampusWhereInput) => BatchPayloadPromise;
  createCourse: (data: CourseCreateInput) => CoursePromise;
  updateCourse: (args: {
    data: CourseUpdateInput;
    where: CourseWhereUniqueInput;
  }) => CoursePromise;
  updateManyCourses: (args: {
    data: CourseUpdateManyMutationInput;
    where?: CourseWhereInput;
  }) => BatchPayloadPromise;
  upsertCourse: (args: {
    where: CourseWhereUniqueInput;
    create: CourseCreateInput;
    update: CourseUpdateInput;
  }) => CoursePromise;
  deleteCourse: (where: CourseWhereUniqueInput) => CoursePromise;
  deleteManyCourses: (where?: CourseWhereInput) => BatchPayloadPromise;
  createCourseInstance: (
    data: CourseInstanceCreateInput
  ) => CourseInstancePromise;
  updateCourseInstance: (args: {
    data: CourseInstanceUpdateInput;
    where: CourseInstanceWhereUniqueInput;
  }) => CourseInstancePromise;
  updateManyCourseInstances: (args: {
    data: CourseInstanceUpdateManyMutationInput;
    where?: CourseInstanceWhereInput;
  }) => BatchPayloadPromise;
  upsertCourseInstance: (args: {
    where: CourseInstanceWhereUniqueInput;
    create: CourseInstanceCreateInput;
    update: CourseInstanceUpdateInput;
  }) => CourseInstancePromise;
  deleteCourseInstance: (
    where: CourseInstanceWhereUniqueInput
  ) => CourseInstancePromise;
  deleteManyCourseInstances: (
    where?: CourseInstanceWhereInput
  ) => BatchPayloadPromise;
  createGlobal: (data: GlobalCreateInput) => GlobalPromise;
  updateGlobal: (args: {
    data: GlobalUpdateInput;
    where: GlobalWhereUniqueInput;
  }) => GlobalPromise;
  updateManyGlobals: (args: {
    data: GlobalUpdateManyMutationInput;
    where?: GlobalWhereInput;
  }) => BatchPayloadPromise;
  upsertGlobal: (args: {
    where: GlobalWhereUniqueInput;
    create: GlobalCreateInput;
    update: GlobalUpdateInput;
  }) => GlobalPromise;
  deleteGlobal: (where: GlobalWhereUniqueInput) => GlobalPromise;
  deleteManyGlobals: (where?: GlobalWhereInput) => BatchPayloadPromise;
  createProblem: (data: ProblemCreateInput) => ProblemPromise;
  updateProblem: (args: {
    data: ProblemUpdateInput;
    where: ProblemWhereUniqueInput;
  }) => ProblemPromise;
  updateManyProblems: (args: {
    data: ProblemUpdateManyMutationInput;
    where?: ProblemWhereInput;
  }) => BatchPayloadPromise;
  upsertProblem: (args: {
    where: ProblemWhereUniqueInput;
    create: ProblemCreateInput;
    update: ProblemUpdateInput;
  }) => ProblemPromise;
  deleteProblem: (where: ProblemWhereUniqueInput) => ProblemPromise;
  deleteManyProblems: (where?: ProblemWhereInput) => BatchPayloadPromise;
  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (args: {
    data: QuestionUpdateInput;
    where: QuestionWhereUniqueInput;
  }) => QuestionPromise;
  updateManyQuestions: (args: {
    data: QuestionUpdateManyMutationInput;
    where?: QuestionWhereInput;
  }) => BatchPayloadPromise;
  upsertQuestion: (args: {
    where: QuestionWhereUniqueInput;
    create: QuestionCreateInput;
    update: QuestionUpdateInput;
  }) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;
  createRecovery: (data: RecoveryCreateInput) => RecoveryPromise;
  updateRecovery: (args: {
    data: RecoveryUpdateInput;
    where: RecoveryWhereUniqueInput;
  }) => RecoveryPromise;
  updateManyRecoveries: (args: {
    data: RecoveryUpdateManyMutationInput;
    where?: RecoveryWhereInput;
  }) => BatchPayloadPromise;
  upsertRecovery: (args: {
    where: RecoveryWhereUniqueInput;
    create: RecoveryCreateInput;
    update: RecoveryUpdateInput;
  }) => RecoveryPromise;
  deleteRecovery: (where: RecoveryWhereUniqueInput) => RecoveryPromise;
  deleteManyRecoveries: (where?: RecoveryWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  branch: (
    where?: BranchSubscriptionWhereInput
  ) => BranchSubscriptionPayloadSubscription;
  campus: (
    where?: CampusSubscriptionWhereInput
  ) => CampusSubscriptionPayloadSubscription;
  course: (
    where?: CourseSubscriptionWhereInput
  ) => CourseSubscriptionPayloadSubscription;
  courseInstance: (
    where?: CourseInstanceSubscriptionWhereInput
  ) => CourseInstanceSubscriptionPayloadSubscription;
  global: (
    where?: GlobalSubscriptionWhereInput
  ) => GlobalSubscriptionPayloadSubscription;
  problem: (
    where?: ProblemSubscriptionWhereInput
  ) => ProblemSubscriptionPayloadSubscription;
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
  recovery: (
    where?: RecoverySubscriptionWhereInput
  ) => RecoverySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BranchOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type CampusOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "admin_id_ASC"
  | "admin_id_DESC"
  | "name_ASC"
  | "name_DESC";

export type CourseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "branch_ASC"
  | "branch_DESC"
  | "coordinator_id_ASC"
  | "coordinator_id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "automated_ASC"
  | "automated_DESC"
  | "campus_ASC"
  | "campus_DESC";

export type CourseInstanceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "studID_ASC"
  | "studID_DESC"
  | "facultyID_ASC"
  | "facultyID_DESC"
  | "completed_ASC"
  | "completed_DESC"
  | "total_ASC"
  | "total_DESC"
  | "course_ASC"
  | "course_DESC"
  | "campus_ASC"
  | "campus_DESC"
  | "department_ASC"
  | "department_DESC"
  | "status_ASC"
  | "status_DESC"
  | "studentName_ASC"
  | "studentName_DESC"
  | "studentReg_ASC"
  | "studentReg_DESC"
  | "correct_ASC"
  | "correct_DESC";

export type GlobalOrderByInput =
  | "regs_ASC"
  | "regs_DESC"
  | "regf_ASC"
  | "regf_DESC"
  | "id_ASC"
  | "id_DESC"
  | "_id_ASC"
  | "_id_DESC";

export type ProblemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "queID_ASC"
  | "queID_DESC"
  | "studID_ASC"
  | "studID_DESC"
  | "description_ASC"
  | "description_DESC"
  | "status_ASC"
  | "status_DESC"
  | "course_ASC"
  | "course_DESC"
  | "campus_ASC"
  | "campus_DESC"
  | "department_ASC"
  | "department_DESC"
  | "facultyID_ASC"
  | "facultyID_DESC";

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "course_ASC"
  | "course_DESC"
  | "name_ASC"
  | "name_DESC"
  | "desc_ASC"
  | "desc_DESC"
  | "exp_ASC"
  | "exp_DESC"
  | "ans_ASC"
  | "ans_DESC";

export type RecoveryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "token_ASC"
  | "token_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC";

export type UserOrderByInput =
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "campus_ASC"
  | "campus_DESC"
  | "department_ASC"
  | "department_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "email_ASC"
  | "email_DESC"
  | "level_ASC"
  | "level_DESC"
  | "id_ASC"
  | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BranchWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface BranchWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<BranchWhereInput[] | BranchWhereInput>;
}

export type CampusWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface CampusWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  admin_id?: Maybe<String>;
  admin_id_not?: Maybe<String>;
  admin_id_in?: Maybe<String[] | String>;
  admin_id_not_in?: Maybe<String[] | String>;
  admin_id_lt?: Maybe<String>;
  admin_id_lte?: Maybe<String>;
  admin_id_gt?: Maybe<String>;
  admin_id_gte?: Maybe<String>;
  admin_id_contains?: Maybe<String>;
  admin_id_not_contains?: Maybe<String>;
  admin_id_starts_with?: Maybe<String>;
  admin_id_not_starts_with?: Maybe<String>;
  admin_id_ends_with?: Maybe<String>;
  admin_id_not_ends_with?: Maybe<String>;
  departments_some?: Maybe<TagWhereInput>;
  departments_every?: Maybe<TagRestrictedWhereInput>;
  departments_none?: Maybe<TagRestrictedWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<CampusWhereInput[] | CampusWhereInput>;
}

export interface TagWhereInput {
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  id?: Maybe<String>;
  id_not?: Maybe<String>;
  id_in?: Maybe<String[] | String>;
  id_not_in?: Maybe<String[] | String>;
  id_lt?: Maybe<String>;
  id_lte?: Maybe<String>;
  id_gt?: Maybe<String>;
  id_gte?: Maybe<String>;
  id_contains?: Maybe<String>;
  id_not_contains?: Maybe<String>;
  id_starts_with?: Maybe<String>;
  id_not_starts_with?: Maybe<String>;
  id_ends_with?: Maybe<String>;
  id_not_ends_with?: Maybe<String>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export interface TagRestrictedWhereInput {
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  id?: Maybe<String>;
  id_not?: Maybe<String>;
  id_in?: Maybe<String[] | String>;
  id_not_in?: Maybe<String[] | String>;
  id_lt?: Maybe<String>;
  id_lte?: Maybe<String>;
  id_gt?: Maybe<String>;
  id_gte?: Maybe<String>;
  id_contains?: Maybe<String>;
  id_not_contains?: Maybe<String>;
  id_starts_with?: Maybe<String>;
  id_not_starts_with?: Maybe<String>;
  id_ends_with?: Maybe<String>;
  id_not_ends_with?: Maybe<String>;
  AND?: Maybe<TagRestrictedWhereInput[] | TagRestrictedWhereInput>;
}

export type CourseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CourseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  branch?: Maybe<String>;
  branch_not?: Maybe<String>;
  branch_in?: Maybe<String[] | String>;
  branch_not_in?: Maybe<String[] | String>;
  branch_lt?: Maybe<String>;
  branch_lte?: Maybe<String>;
  branch_gt?: Maybe<String>;
  branch_gte?: Maybe<String>;
  branch_contains?: Maybe<String>;
  branch_not_contains?: Maybe<String>;
  branch_starts_with?: Maybe<String>;
  branch_not_starts_with?: Maybe<String>;
  branch_ends_with?: Maybe<String>;
  branch_not_ends_with?: Maybe<String>;
  coordinator_id?: Maybe<String>;
  coordinator_id_not?: Maybe<String>;
  coordinator_id_in?: Maybe<String[] | String>;
  coordinator_id_not_in?: Maybe<String[] | String>;
  coordinator_id_lt?: Maybe<String>;
  coordinator_id_lte?: Maybe<String>;
  coordinator_id_gt?: Maybe<String>;
  coordinator_id_gte?: Maybe<String>;
  coordinator_id_contains?: Maybe<String>;
  coordinator_id_not_contains?: Maybe<String>;
  coordinator_id_starts_with?: Maybe<String>;
  coordinator_id_not_starts_with?: Maybe<String>;
  coordinator_id_ends_with?: Maybe<String>;
  coordinator_id_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  automated?: Maybe<Boolean>;
  automated_not?: Maybe<Boolean>;
  campus?: Maybe<String>;
  campus_not?: Maybe<String>;
  campus_in?: Maybe<String[] | String>;
  campus_not_in?: Maybe<String[] | String>;
  campus_lt?: Maybe<String>;
  campus_lte?: Maybe<String>;
  campus_gt?: Maybe<String>;
  campus_gte?: Maybe<String>;
  campus_contains?: Maybe<String>;
  campus_not_contains?: Maybe<String>;
  campus_starts_with?: Maybe<String>;
  campus_not_starts_with?: Maybe<String>;
  campus_ends_with?: Maybe<String>;
  campus_not_ends_with?: Maybe<String>;
  AND?: Maybe<CourseWhereInput[] | CourseWhereInput>;
}

export type CourseInstanceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CourseInstanceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  studID?: Maybe<String>;
  studID_not?: Maybe<String>;
  studID_in?: Maybe<String[] | String>;
  studID_not_in?: Maybe<String[] | String>;
  studID_lt?: Maybe<String>;
  studID_lte?: Maybe<String>;
  studID_gt?: Maybe<String>;
  studID_gte?: Maybe<String>;
  studID_contains?: Maybe<String>;
  studID_not_contains?: Maybe<String>;
  studID_starts_with?: Maybe<String>;
  studID_not_starts_with?: Maybe<String>;
  studID_ends_with?: Maybe<String>;
  studID_not_ends_with?: Maybe<String>;
  facultyID?: Maybe<String>;
  facultyID_not?: Maybe<String>;
  facultyID_in?: Maybe<String[] | String>;
  facultyID_not_in?: Maybe<String[] | String>;
  facultyID_lt?: Maybe<String>;
  facultyID_lte?: Maybe<String>;
  facultyID_gt?: Maybe<String>;
  facultyID_gte?: Maybe<String>;
  facultyID_contains?: Maybe<String>;
  facultyID_not_contains?: Maybe<String>;
  facultyID_starts_with?: Maybe<String>;
  facultyID_not_starts_with?: Maybe<String>;
  facultyID_ends_with?: Maybe<String>;
  facultyID_not_ends_with?: Maybe<String>;
  questions_some?: Maybe<LinkWhereInput>;
  questions_every?: Maybe<LinkRestrictedWhereInput>;
  questions_none?: Maybe<LinkRestrictedWhereInput>;
  completed?: Maybe<Int>;
  completed_not?: Maybe<Int>;
  completed_in?: Maybe<Int[] | Int>;
  completed_not_in?: Maybe<Int[] | Int>;
  completed_lt?: Maybe<Int>;
  completed_lte?: Maybe<Int>;
  completed_gt?: Maybe<Int>;
  completed_gte?: Maybe<Int>;
  total?: Maybe<Int>;
  total_not?: Maybe<Int>;
  total_in?: Maybe<Int[] | Int>;
  total_not_in?: Maybe<Int[] | Int>;
  total_lt?: Maybe<Int>;
  total_lte?: Maybe<Int>;
  total_gt?: Maybe<Int>;
  total_gte?: Maybe<Int>;
  course?: Maybe<String>;
  course_not?: Maybe<String>;
  course_in?: Maybe<String[] | String>;
  course_not_in?: Maybe<String[] | String>;
  course_lt?: Maybe<String>;
  course_lte?: Maybe<String>;
  course_gt?: Maybe<String>;
  course_gte?: Maybe<String>;
  course_contains?: Maybe<String>;
  course_not_contains?: Maybe<String>;
  course_starts_with?: Maybe<String>;
  course_not_starts_with?: Maybe<String>;
  course_ends_with?: Maybe<String>;
  course_not_ends_with?: Maybe<String>;
  campus?: Maybe<String>;
  campus_not?: Maybe<String>;
  campus_in?: Maybe<String[] | String>;
  campus_not_in?: Maybe<String[] | String>;
  campus_lt?: Maybe<String>;
  campus_lte?: Maybe<String>;
  campus_gt?: Maybe<String>;
  campus_gte?: Maybe<String>;
  campus_contains?: Maybe<String>;
  campus_not_contains?: Maybe<String>;
  campus_starts_with?: Maybe<String>;
  campus_not_starts_with?: Maybe<String>;
  campus_ends_with?: Maybe<String>;
  campus_not_ends_with?: Maybe<String>;
  department?: Maybe<String>;
  department_not?: Maybe<String>;
  department_in?: Maybe<String[] | String>;
  department_not_in?: Maybe<String[] | String>;
  department_lt?: Maybe<String>;
  department_lte?: Maybe<String>;
  department_gt?: Maybe<String>;
  department_gte?: Maybe<String>;
  department_contains?: Maybe<String>;
  department_not_contains?: Maybe<String>;
  department_starts_with?: Maybe<String>;
  department_not_starts_with?: Maybe<String>;
  department_ends_with?: Maybe<String>;
  department_not_ends_with?: Maybe<String>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  studentName?: Maybe<String>;
  studentName_not?: Maybe<String>;
  studentName_in?: Maybe<String[] | String>;
  studentName_not_in?: Maybe<String[] | String>;
  studentName_lt?: Maybe<String>;
  studentName_lte?: Maybe<String>;
  studentName_gt?: Maybe<String>;
  studentName_gte?: Maybe<String>;
  studentName_contains?: Maybe<String>;
  studentName_not_contains?: Maybe<String>;
  studentName_starts_with?: Maybe<String>;
  studentName_not_starts_with?: Maybe<String>;
  studentName_ends_with?: Maybe<String>;
  studentName_not_ends_with?: Maybe<String>;
  studentReg?: Maybe<String>;
  studentReg_not?: Maybe<String>;
  studentReg_in?: Maybe<String[] | String>;
  studentReg_not_in?: Maybe<String[] | String>;
  studentReg_lt?: Maybe<String>;
  studentReg_lte?: Maybe<String>;
  studentReg_gt?: Maybe<String>;
  studentReg_gte?: Maybe<String>;
  studentReg_contains?: Maybe<String>;
  studentReg_not_contains?: Maybe<String>;
  studentReg_starts_with?: Maybe<String>;
  studentReg_not_starts_with?: Maybe<String>;
  studentReg_ends_with?: Maybe<String>;
  studentReg_not_ends_with?: Maybe<String>;
  correct?: Maybe<Int>;
  correct_not?: Maybe<Int>;
  correct_in?: Maybe<Int[] | Int>;
  correct_not_in?: Maybe<Int[] | Int>;
  correct_lt?: Maybe<Int>;
  correct_lte?: Maybe<Int>;
  correct_gt?: Maybe<Int>;
  correct_gte?: Maybe<Int>;
  AND?: Maybe<CourseInstanceWhereInput[] | CourseInstanceWhereInput>;
}

export interface LinkWhereInput {
  id?: Maybe<String>;
  id_not?: Maybe<String>;
  id_in?: Maybe<String[] | String>;
  id_not_in?: Maybe<String[] | String>;
  id_lt?: Maybe<String>;
  id_lte?: Maybe<String>;
  id_gt?: Maybe<String>;
  id_gte?: Maybe<String>;
  id_contains?: Maybe<String>;
  id_not_contains?: Maybe<String>;
  id_starts_with?: Maybe<String>;
  id_not_starts_with?: Maybe<String>;
  id_ends_with?: Maybe<String>;
  id_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  ans?: Maybe<String>;
  ans_not?: Maybe<String>;
  ans_in?: Maybe<String[] | String>;
  ans_not_in?: Maybe<String[] | String>;
  ans_lt?: Maybe<String>;
  ans_lte?: Maybe<String>;
  ans_gt?: Maybe<String>;
  ans_gte?: Maybe<String>;
  ans_contains?: Maybe<String>;
  ans_not_contains?: Maybe<String>;
  ans_starts_with?: Maybe<String>;
  ans_not_starts_with?: Maybe<String>;
  ans_ends_with?: Maybe<String>;
  ans_not_ends_with?: Maybe<String>;
  AND?: Maybe<LinkWhereInput[] | LinkWhereInput>;
}

export interface LinkRestrictedWhereInput {
  id?: Maybe<String>;
  id_not?: Maybe<String>;
  id_in?: Maybe<String[] | String>;
  id_not_in?: Maybe<String[] | String>;
  id_lt?: Maybe<String>;
  id_lte?: Maybe<String>;
  id_gt?: Maybe<String>;
  id_gte?: Maybe<String>;
  id_contains?: Maybe<String>;
  id_not_contains?: Maybe<String>;
  id_starts_with?: Maybe<String>;
  id_not_starts_with?: Maybe<String>;
  id_ends_with?: Maybe<String>;
  id_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  ans?: Maybe<String>;
  ans_not?: Maybe<String>;
  ans_in?: Maybe<String[] | String>;
  ans_not_in?: Maybe<String[] | String>;
  ans_lt?: Maybe<String>;
  ans_lte?: Maybe<String>;
  ans_gt?: Maybe<String>;
  ans_gte?: Maybe<String>;
  ans_contains?: Maybe<String>;
  ans_not_contains?: Maybe<String>;
  ans_starts_with?: Maybe<String>;
  ans_not_starts_with?: Maybe<String>;
  ans_ends_with?: Maybe<String>;
  ans_not_ends_with?: Maybe<String>;
  AND?: Maybe<LinkRestrictedWhereInput[] | LinkRestrictedWhereInput>;
}

export type GlobalWhereUniqueInput = AtLeastOne<{
  id: Maybe<String>;
  _id?: Maybe<ID_Input>;
}>;

export interface GlobalWhereInput {
  regs?: Maybe<Boolean>;
  regs_not?: Maybe<Boolean>;
  regf?: Maybe<Boolean>;
  regf_not?: Maybe<Boolean>;
  defaultCourses_some?: Maybe<DefaultCourseWhereInput>;
  defaultCourses_every?: Maybe<DefaultCourseRestrictedWhereInput>;
  defaultCourses_none?: Maybe<DefaultCourseRestrictedWhereInput>;
  id?: Maybe<String>;
  id_not?: Maybe<String>;
  id_in?: Maybe<String[] | String>;
  id_not_in?: Maybe<String[] | String>;
  id_lt?: Maybe<String>;
  id_lte?: Maybe<String>;
  id_gt?: Maybe<String>;
  id_gte?: Maybe<String>;
  id_contains?: Maybe<String>;
  id_not_contains?: Maybe<String>;
  id_starts_with?: Maybe<String>;
  id_not_starts_with?: Maybe<String>;
  id_ends_with?: Maybe<String>;
  id_not_ends_with?: Maybe<String>;
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<GlobalWhereInput[] | GlobalWhereInput>;
}

export interface DefaultCourseWhereInput {
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  branch?: Maybe<String>;
  branch_not?: Maybe<String>;
  branch_in?: Maybe<String[] | String>;
  branch_not_in?: Maybe<String[] | String>;
  branch_lt?: Maybe<String>;
  branch_lte?: Maybe<String>;
  branch_gt?: Maybe<String>;
  branch_gte?: Maybe<String>;
  branch_contains?: Maybe<String>;
  branch_not_contains?: Maybe<String>;
  branch_starts_with?: Maybe<String>;
  branch_not_starts_with?: Maybe<String>;
  branch_ends_with?: Maybe<String>;
  branch_not_ends_with?: Maybe<String>;
  automated?: Maybe<Boolean>;
  automated_not?: Maybe<Boolean>;
  AND?: Maybe<DefaultCourseWhereInput[] | DefaultCourseWhereInput>;
}

export interface DefaultCourseRestrictedWhereInput {
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  branch?: Maybe<String>;
  branch_not?: Maybe<String>;
  branch_in?: Maybe<String[] | String>;
  branch_not_in?: Maybe<String[] | String>;
  branch_lt?: Maybe<String>;
  branch_lte?: Maybe<String>;
  branch_gt?: Maybe<String>;
  branch_gte?: Maybe<String>;
  branch_contains?: Maybe<String>;
  branch_not_contains?: Maybe<String>;
  branch_starts_with?: Maybe<String>;
  branch_not_starts_with?: Maybe<String>;
  branch_ends_with?: Maybe<String>;
  branch_not_ends_with?: Maybe<String>;
  automated?: Maybe<Boolean>;
  automated_not?: Maybe<Boolean>;
  AND?: Maybe<
    DefaultCourseRestrictedWhereInput[] | DefaultCourseRestrictedWhereInput
  >;
}

export type ProblemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProblemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  queID?: Maybe<String>;
  queID_not?: Maybe<String>;
  queID_in?: Maybe<String[] | String>;
  queID_not_in?: Maybe<String[] | String>;
  queID_lt?: Maybe<String>;
  queID_lte?: Maybe<String>;
  queID_gt?: Maybe<String>;
  queID_gte?: Maybe<String>;
  queID_contains?: Maybe<String>;
  queID_not_contains?: Maybe<String>;
  queID_starts_with?: Maybe<String>;
  queID_not_starts_with?: Maybe<String>;
  queID_ends_with?: Maybe<String>;
  queID_not_ends_with?: Maybe<String>;
  studID?: Maybe<String>;
  studID_not?: Maybe<String>;
  studID_in?: Maybe<String[] | String>;
  studID_not_in?: Maybe<String[] | String>;
  studID_lt?: Maybe<String>;
  studID_lte?: Maybe<String>;
  studID_gt?: Maybe<String>;
  studID_gte?: Maybe<String>;
  studID_contains?: Maybe<String>;
  studID_not_contains?: Maybe<String>;
  studID_starts_with?: Maybe<String>;
  studID_not_starts_with?: Maybe<String>;
  studID_ends_with?: Maybe<String>;
  studID_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  course?: Maybe<String>;
  course_not?: Maybe<String>;
  course_in?: Maybe<String[] | String>;
  course_not_in?: Maybe<String[] | String>;
  course_lt?: Maybe<String>;
  course_lte?: Maybe<String>;
  course_gt?: Maybe<String>;
  course_gte?: Maybe<String>;
  course_contains?: Maybe<String>;
  course_not_contains?: Maybe<String>;
  course_starts_with?: Maybe<String>;
  course_not_starts_with?: Maybe<String>;
  course_ends_with?: Maybe<String>;
  course_not_ends_with?: Maybe<String>;
  campus?: Maybe<String>;
  campus_not?: Maybe<String>;
  campus_in?: Maybe<String[] | String>;
  campus_not_in?: Maybe<String[] | String>;
  campus_lt?: Maybe<String>;
  campus_lte?: Maybe<String>;
  campus_gt?: Maybe<String>;
  campus_gte?: Maybe<String>;
  campus_contains?: Maybe<String>;
  campus_not_contains?: Maybe<String>;
  campus_starts_with?: Maybe<String>;
  campus_not_starts_with?: Maybe<String>;
  campus_ends_with?: Maybe<String>;
  campus_not_ends_with?: Maybe<String>;
  department?: Maybe<String>;
  department_not?: Maybe<String>;
  department_in?: Maybe<String[] | String>;
  department_not_in?: Maybe<String[] | String>;
  department_lt?: Maybe<String>;
  department_lte?: Maybe<String>;
  department_gt?: Maybe<String>;
  department_gte?: Maybe<String>;
  department_contains?: Maybe<String>;
  department_not_contains?: Maybe<String>;
  department_starts_with?: Maybe<String>;
  department_not_starts_with?: Maybe<String>;
  department_ends_with?: Maybe<String>;
  department_not_ends_with?: Maybe<String>;
  facultyID?: Maybe<String>;
  facultyID_not?: Maybe<String>;
  facultyID_in?: Maybe<String[] | String>;
  facultyID_not_in?: Maybe<String[] | String>;
  facultyID_lt?: Maybe<String>;
  facultyID_lte?: Maybe<String>;
  facultyID_gt?: Maybe<String>;
  facultyID_gte?: Maybe<String>;
  facultyID_contains?: Maybe<String>;
  facultyID_not_contains?: Maybe<String>;
  facultyID_starts_with?: Maybe<String>;
  facultyID_not_starts_with?: Maybe<String>;
  facultyID_ends_with?: Maybe<String>;
  facultyID_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProblemWhereInput[] | ProblemWhereInput>;
}

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface QuestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  course?: Maybe<String>;
  course_not?: Maybe<String>;
  course_in?: Maybe<String[] | String>;
  course_not_in?: Maybe<String[] | String>;
  course_lt?: Maybe<String>;
  course_lte?: Maybe<String>;
  course_gt?: Maybe<String>;
  course_gte?: Maybe<String>;
  course_contains?: Maybe<String>;
  course_not_contains?: Maybe<String>;
  course_starts_with?: Maybe<String>;
  course_not_starts_with?: Maybe<String>;
  course_ends_with?: Maybe<String>;
  course_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  desc?: Maybe<String>;
  desc_not?: Maybe<String>;
  desc_in?: Maybe<String[] | String>;
  desc_not_in?: Maybe<String[] | String>;
  desc_lt?: Maybe<String>;
  desc_lte?: Maybe<String>;
  desc_gt?: Maybe<String>;
  desc_gte?: Maybe<String>;
  desc_contains?: Maybe<String>;
  desc_not_contains?: Maybe<String>;
  desc_starts_with?: Maybe<String>;
  desc_not_starts_with?: Maybe<String>;
  desc_ends_with?: Maybe<String>;
  desc_not_ends_with?: Maybe<String>;
  exp?: Maybe<String>;
  exp_not?: Maybe<String>;
  exp_in?: Maybe<String[] | String>;
  exp_not_in?: Maybe<String[] | String>;
  exp_lt?: Maybe<String>;
  exp_lte?: Maybe<String>;
  exp_gt?: Maybe<String>;
  exp_gte?: Maybe<String>;
  exp_contains?: Maybe<String>;
  exp_not_contains?: Maybe<String>;
  exp_starts_with?: Maybe<String>;
  exp_not_starts_with?: Maybe<String>;
  exp_ends_with?: Maybe<String>;
  exp_not_ends_with?: Maybe<String>;
  opt?: Maybe<OptionsWhereInput>;
  ans?: Maybe<String>;
  ans_not?: Maybe<String>;
  ans_in?: Maybe<String[] | String>;
  ans_not_in?: Maybe<String[] | String>;
  ans_lt?: Maybe<String>;
  ans_lte?: Maybe<String>;
  ans_gt?: Maybe<String>;
  ans_gte?: Maybe<String>;
  ans_contains?: Maybe<String>;
  ans_not_contains?: Maybe<String>;
  ans_starts_with?: Maybe<String>;
  ans_not_starts_with?: Maybe<String>;
  ans_ends_with?: Maybe<String>;
  ans_not_ends_with?: Maybe<String>;
  AND?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
}

export interface OptionsWhereInput {
  a?: Maybe<String>;
  a_not?: Maybe<String>;
  a_in?: Maybe<String[] | String>;
  a_not_in?: Maybe<String[] | String>;
  a_lt?: Maybe<String>;
  a_lte?: Maybe<String>;
  a_gt?: Maybe<String>;
  a_gte?: Maybe<String>;
  a_contains?: Maybe<String>;
  a_not_contains?: Maybe<String>;
  a_starts_with?: Maybe<String>;
  a_not_starts_with?: Maybe<String>;
  a_ends_with?: Maybe<String>;
  a_not_ends_with?: Maybe<String>;
  b?: Maybe<String>;
  b_not?: Maybe<String>;
  b_in?: Maybe<String[] | String>;
  b_not_in?: Maybe<String[] | String>;
  b_lt?: Maybe<String>;
  b_lte?: Maybe<String>;
  b_gt?: Maybe<String>;
  b_gte?: Maybe<String>;
  b_contains?: Maybe<String>;
  b_not_contains?: Maybe<String>;
  b_starts_with?: Maybe<String>;
  b_not_starts_with?: Maybe<String>;
  b_ends_with?: Maybe<String>;
  b_not_ends_with?: Maybe<String>;
  c?: Maybe<String>;
  c_not?: Maybe<String>;
  c_in?: Maybe<String[] | String>;
  c_not_in?: Maybe<String[] | String>;
  c_lt?: Maybe<String>;
  c_lte?: Maybe<String>;
  c_gt?: Maybe<String>;
  c_gte?: Maybe<String>;
  c_contains?: Maybe<String>;
  c_not_contains?: Maybe<String>;
  c_starts_with?: Maybe<String>;
  c_not_starts_with?: Maybe<String>;
  c_ends_with?: Maybe<String>;
  c_not_ends_with?: Maybe<String>;
  d?: Maybe<String>;
  d_not?: Maybe<String>;
  d_in?: Maybe<String[] | String>;
  d_not_in?: Maybe<String[] | String>;
  d_lt?: Maybe<String>;
  d_lte?: Maybe<String>;
  d_gt?: Maybe<String>;
  d_gte?: Maybe<String>;
  d_contains?: Maybe<String>;
  d_not_contains?: Maybe<String>;
  d_starts_with?: Maybe<String>;
  d_not_starts_with?: Maybe<String>;
  d_ends_with?: Maybe<String>;
  d_not_ends_with?: Maybe<String>;
  AND?: Maybe<OptionsWhereInput[] | OptionsWhereInput>;
}

export type RecoveryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  token?: Maybe<String>;
}>;

export interface RecoveryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<RecoveryWhereInput[] | RecoveryWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  username: Maybe<String>;
  id?: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  campus?: Maybe<String>;
  campus_not?: Maybe<String>;
  campus_in?: Maybe<String[] | String>;
  campus_not_in?: Maybe<String[] | String>;
  campus_lt?: Maybe<String>;
  campus_lte?: Maybe<String>;
  campus_gt?: Maybe<String>;
  campus_gte?: Maybe<String>;
  campus_contains?: Maybe<String>;
  campus_not_contains?: Maybe<String>;
  campus_starts_with?: Maybe<String>;
  campus_not_starts_with?: Maybe<String>;
  campus_ends_with?: Maybe<String>;
  campus_not_ends_with?: Maybe<String>;
  department?: Maybe<String>;
  department_not?: Maybe<String>;
  department_in?: Maybe<String[] | String>;
  department_not_in?: Maybe<String[] | String>;
  department_lt?: Maybe<String>;
  department_lte?: Maybe<String>;
  department_gt?: Maybe<String>;
  department_gte?: Maybe<String>;
  department_contains?: Maybe<String>;
  department_not_contains?: Maybe<String>;
  department_starts_with?: Maybe<String>;
  department_not_starts_with?: Maybe<String>;
  department_ends_with?: Maybe<String>;
  department_not_ends_with?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  dob_not?: Maybe<DateTimeInput>;
  dob_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_lt?: Maybe<DateTimeInput>;
  dob_lte?: Maybe<DateTimeInput>;
  dob_gt?: Maybe<DateTimeInput>;
  dob_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface BranchCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface BranchUpdateInput {
  name?: Maybe<String>;
}

export interface BranchUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface CampusCreateInput {
  id?: Maybe<ID_Input>;
  admin_id: String;
  departments?: Maybe<TagCreateManyInput>;
  name: String;
}

export interface TagCreateManyInput {
  create?: Maybe<TagCreateInput[] | TagCreateInput>;
}

export interface TagCreateInput {
  name: String;
  id: String;
}

export interface CampusUpdateInput {
  admin_id?: Maybe<String>;
  departments?: Maybe<TagUpdateManyInput>;
  name?: Maybe<String>;
}

export interface TagUpdateManyInput {
  create?: Maybe<TagCreateInput[] | TagCreateInput>;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface TagScalarWhereInput {
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  id?: Maybe<String>;
  id_not?: Maybe<String>;
  id_in?: Maybe<String[] | String>;
  id_not_in?: Maybe<String[] | String>;
  id_lt?: Maybe<String>;
  id_lte?: Maybe<String>;
  id_gt?: Maybe<String>;
  id_gte?: Maybe<String>;
  id_contains?: Maybe<String>;
  id_not_contains?: Maybe<String>;
  id_starts_with?: Maybe<String>;
  id_not_starts_with?: Maybe<String>;
  id_ends_with?: Maybe<String>;
  id_not_ends_with?: Maybe<String>;
  AND?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  OR?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  NOT?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface TagUpdateManyDataInput {
  name?: Maybe<String>;
  id?: Maybe<String>;
}

export interface CampusUpdateManyMutationInput {
  admin_id?: Maybe<String>;
  name?: Maybe<String>;
}

export interface CourseCreateInput {
  id?: Maybe<ID_Input>;
  branch: String;
  coordinator_id: String;
  name: String;
  automated?: Maybe<Boolean>;
  campus: String;
}

export interface CourseUpdateInput {
  branch?: Maybe<String>;
  coordinator_id?: Maybe<String>;
  name?: Maybe<String>;
  automated?: Maybe<Boolean>;
  campus?: Maybe<String>;
}

export interface CourseUpdateManyMutationInput {
  branch?: Maybe<String>;
  coordinator_id?: Maybe<String>;
  name?: Maybe<String>;
  automated?: Maybe<Boolean>;
  campus?: Maybe<String>;
}

export interface CourseInstanceCreateInput {
  id?: Maybe<ID_Input>;
  studID: String;
  facultyID: String;
  questions?: Maybe<LinkCreateManyInput>;
  completed?: Maybe<Int>;
  total?: Maybe<Int>;
  course: String;
  campus: String;
  department: String;
  status: Boolean;
  studentName: String;
  studentReg: String;
  correct?: Maybe<Int>;
}

export interface LinkCreateManyInput {
  create?: Maybe<LinkCreateInput[] | LinkCreateInput>;
}

export interface LinkCreateInput {
  id: String;
  status?: Maybe<Int>;
  ans?: Maybe<String>;
}

export interface CourseInstanceUpdateInput {
  studID?: Maybe<String>;
  facultyID?: Maybe<String>;
  questions?: Maybe<LinkUpdateManyInput>;
  completed?: Maybe<Int>;
  total?: Maybe<Int>;
  course?: Maybe<String>;
  campus?: Maybe<String>;
  department?: Maybe<String>;
  status?: Maybe<Boolean>;
  studentName?: Maybe<String>;
  studentReg?: Maybe<String>;
  correct?: Maybe<Int>;
}

export interface LinkUpdateManyInput {
  create?: Maybe<LinkCreateInput[] | LinkCreateInput>;
  deleteMany?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  updateMany?: Maybe<
    LinkUpdateManyWithWhereNestedInput[] | LinkUpdateManyWithWhereNestedInput
  >;
}

export interface LinkScalarWhereInput {
  id?: Maybe<String>;
  id_not?: Maybe<String>;
  id_in?: Maybe<String[] | String>;
  id_not_in?: Maybe<String[] | String>;
  id_lt?: Maybe<String>;
  id_lte?: Maybe<String>;
  id_gt?: Maybe<String>;
  id_gte?: Maybe<String>;
  id_contains?: Maybe<String>;
  id_not_contains?: Maybe<String>;
  id_starts_with?: Maybe<String>;
  id_not_starts_with?: Maybe<String>;
  id_ends_with?: Maybe<String>;
  id_not_ends_with?: Maybe<String>;
  status?: Maybe<Int>;
  status_not?: Maybe<Int>;
  status_in?: Maybe<Int[] | Int>;
  status_not_in?: Maybe<Int[] | Int>;
  status_lt?: Maybe<Int>;
  status_lte?: Maybe<Int>;
  status_gt?: Maybe<Int>;
  status_gte?: Maybe<Int>;
  ans?: Maybe<String>;
  ans_not?: Maybe<String>;
  ans_in?: Maybe<String[] | String>;
  ans_not_in?: Maybe<String[] | String>;
  ans_lt?: Maybe<String>;
  ans_lte?: Maybe<String>;
  ans_gt?: Maybe<String>;
  ans_gte?: Maybe<String>;
  ans_contains?: Maybe<String>;
  ans_not_contains?: Maybe<String>;
  ans_starts_with?: Maybe<String>;
  ans_not_starts_with?: Maybe<String>;
  ans_ends_with?: Maybe<String>;
  ans_not_ends_with?: Maybe<String>;
  AND?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  OR?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  NOT?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
}

export interface LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput;
  data: LinkUpdateManyDataInput;
}

export interface LinkUpdateManyDataInput {
  id?: Maybe<String>;
  status?: Maybe<Int>;
  ans?: Maybe<String>;
}

export interface CourseInstanceUpdateManyMutationInput {
  studID?: Maybe<String>;
  facultyID?: Maybe<String>;
  completed?: Maybe<Int>;
  total?: Maybe<Int>;
  course?: Maybe<String>;
  campus?: Maybe<String>;
  department?: Maybe<String>;
  status?: Maybe<Boolean>;
  studentName?: Maybe<String>;
  studentReg?: Maybe<String>;
  correct?: Maybe<Int>;
}

export interface GlobalCreateInput {
  regs?: Maybe<Boolean>;
  regf?: Maybe<Boolean>;
  defaultCourses?: Maybe<DefaultCourseCreateManyInput>;
  id?: Maybe<String>;
  _id?: Maybe<ID_Input>;
}

export interface DefaultCourseCreateManyInput {
  create?: Maybe<DefaultCourseCreateInput[] | DefaultCourseCreateInput>;
}

export interface DefaultCourseCreateInput {
  name: String;
  branch: String;
  automated?: Maybe<Boolean>;
}

export interface GlobalUpdateInput {
  regs?: Maybe<Boolean>;
  regf?: Maybe<Boolean>;
  defaultCourses?: Maybe<DefaultCourseUpdateManyInput>;
  id?: Maybe<String>;
}

export interface DefaultCourseUpdateManyInput {
  create?: Maybe<DefaultCourseCreateInput[] | DefaultCourseCreateInput>;
  deleteMany?: Maybe<
    DefaultCourseScalarWhereInput[] | DefaultCourseScalarWhereInput
  >;
  updateMany?: Maybe<
    | DefaultCourseUpdateManyWithWhereNestedInput[]
    | DefaultCourseUpdateManyWithWhereNestedInput
  >;
}

export interface DefaultCourseScalarWhereInput {
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  branch?: Maybe<String>;
  branch_not?: Maybe<String>;
  branch_in?: Maybe<String[] | String>;
  branch_not_in?: Maybe<String[] | String>;
  branch_lt?: Maybe<String>;
  branch_lte?: Maybe<String>;
  branch_gt?: Maybe<String>;
  branch_gte?: Maybe<String>;
  branch_contains?: Maybe<String>;
  branch_not_contains?: Maybe<String>;
  branch_starts_with?: Maybe<String>;
  branch_not_starts_with?: Maybe<String>;
  branch_ends_with?: Maybe<String>;
  branch_not_ends_with?: Maybe<String>;
  automated?: Maybe<Boolean>;
  automated_not?: Maybe<Boolean>;
  AND?: Maybe<DefaultCourseScalarWhereInput[] | DefaultCourseScalarWhereInput>;
  OR?: Maybe<DefaultCourseScalarWhereInput[] | DefaultCourseScalarWhereInput>;
  NOT?: Maybe<DefaultCourseScalarWhereInput[] | DefaultCourseScalarWhereInput>;
}

export interface DefaultCourseUpdateManyWithWhereNestedInput {
  where: DefaultCourseScalarWhereInput;
  data: DefaultCourseUpdateManyDataInput;
}

export interface DefaultCourseUpdateManyDataInput {
  name?: Maybe<String>;
  branch?: Maybe<String>;
  automated?: Maybe<Boolean>;
}

export interface GlobalUpdateManyMutationInput {
  regs?: Maybe<Boolean>;
  regf?: Maybe<Boolean>;
  id?: Maybe<String>;
}

export interface ProblemCreateInput {
  id?: Maybe<ID_Input>;
  queID: String;
  studID: String;
  description: String;
  status?: Maybe<Int>;
  course: String;
  campus?: Maybe<String>;
  department?: Maybe<String>;
  facultyID: String;
}

export interface ProblemUpdateInput {
  queID?: Maybe<String>;
  studID?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<Int>;
  course?: Maybe<String>;
  campus?: Maybe<String>;
  department?: Maybe<String>;
  facultyID?: Maybe<String>;
}

export interface ProblemUpdateManyMutationInput {
  queID?: Maybe<String>;
  studID?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<Int>;
  course?: Maybe<String>;
  campus?: Maybe<String>;
  department?: Maybe<String>;
  facultyID?: Maybe<String>;
}

export interface QuestionCreateInput {
  id?: Maybe<ID_Input>;
  course: String;
  name: String;
  desc: String;
  exp: String;
  opt: OptionsCreateOneInput;
  ans: String;
}

export interface OptionsCreateOneInput {
  create?: Maybe<OptionsCreateInput>;
}

export interface OptionsCreateInput {
  a: String;
  b: String;
  c: String;
  d: String;
}

export interface QuestionUpdateInput {
  course?: Maybe<String>;
  name?: Maybe<String>;
  desc?: Maybe<String>;
  exp?: Maybe<String>;
  opt?: Maybe<OptionsUpdateOneRequiredInput>;
  ans?: Maybe<String>;
}

export interface OptionsUpdateOneRequiredInput {
  create?: Maybe<OptionsCreateInput>;
  update?: Maybe<OptionsUpdateDataInput>;
  upsert?: Maybe<OptionsUpsertNestedInput>;
}

export interface OptionsUpdateDataInput {
  a?: Maybe<String>;
  b?: Maybe<String>;
  c?: Maybe<String>;
  d?: Maybe<String>;
}

export interface OptionsUpsertNestedInput {
  update: OptionsUpdateDataInput;
  create: OptionsCreateInput;
}

export interface QuestionUpdateManyMutationInput {
  course?: Maybe<String>;
  name?: Maybe<String>;
  desc?: Maybe<String>;
  exp?: Maybe<String>;
  ans?: Maybe<String>;
}

export interface RecoveryCreateInput {
  id?: Maybe<ID_Input>;
  token: String;
  username: String;
  email: String;
}

export interface RecoveryUpdateInput {
  token?: Maybe<String>;
  username?: Maybe<String>;
  email?: Maybe<String>;
}

export interface RecoveryUpdateManyMutationInput {
  token?: Maybe<String>;
  username?: Maybe<String>;
  email?: Maybe<String>;
}

export interface UserCreateInput {
  username: String;
  password: String;
  name: String;
  campus?: Maybe<String>;
  department?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  email: String;
  level: Int;
  id?: Maybe<ID_Input>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  campus?: Maybe<String>;
  department?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  level?: Maybe<Int>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  campus?: Maybe<String>;
  department?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  level?: Maybe<Int>;
}

export interface BranchSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BranchWhereInput>;
  AND?: Maybe<BranchSubscriptionWhereInput[] | BranchSubscriptionWhereInput>;
}

export interface CampusSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CampusWhereInput>;
  AND?: Maybe<CampusSubscriptionWhereInput[] | CampusSubscriptionWhereInput>;
}

export interface CourseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CourseWhereInput>;
  AND?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
}

export interface CourseInstanceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CourseInstanceWhereInput>;
  AND?: Maybe<
    | CourseInstanceSubscriptionWhereInput[]
    | CourseInstanceSubscriptionWhereInput
  >;
}

export interface GlobalSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GlobalWhereInput>;
  AND?: Maybe<GlobalSubscriptionWhereInput[] | GlobalSubscriptionWhereInput>;
}

export interface ProblemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProblemWhereInput>;
  AND?: Maybe<ProblemSubscriptionWhereInput[] | ProblemSubscriptionWhereInput>;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuestionWhereInput>;
  AND?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
}

export interface RecoverySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RecoveryWhereInput>;
  AND?: Maybe<
    RecoverySubscriptionWhereInput[] | RecoverySubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Branch {
  id: ID_Output;
  name: String;
}

export interface BranchPromise extends Promise<Branch>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface BranchSubscription
  extends Promise<AsyncIterator<Branch>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface BranchNullablePromise
  extends Promise<Branch | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface BranchConnection {
  pageInfo: PageInfo;
  edges: BranchEdge[];
}

export interface BranchConnectionPromise
  extends Promise<BranchConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BranchEdge>>() => T;
  aggregate: <T = AggregateBranchPromise>() => T;
}

export interface BranchConnectionSubscription
  extends Promise<AsyncIterator<BranchConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BranchEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBranchSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BranchEdge {
  node: Branch;
  cursor: String;
}

export interface BranchEdgePromise extends Promise<BranchEdge>, Fragmentable {
  node: <T = BranchPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BranchEdgeSubscription
  extends Promise<AsyncIterator<BranchEdge>>,
    Fragmentable {
  node: <T = BranchSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBranch {
  count: Int;
}

export interface AggregateBranchPromise
  extends Promise<AggregateBranch>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBranchSubscription
  extends Promise<AsyncIterator<AggregateBranch>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Campus {
  id: ID_Output;
  admin_id: String;
  departments?: <T = FragmentableArray<Tag>>() => T;
  name: String;
}

export interface CampusPromise extends Promise<Campus>, Fragmentable {
  id: () => Promise<ID_Output>;
  admin_id: () => Promise<String>;
  departments: <T = FragmentableArray<Tag>>() => T;
  name: () => Promise<String>;
}

export interface CampusSubscription
  extends Promise<AsyncIterator<Campus>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  admin_id: () => Promise<AsyncIterator<String>>;
  departments: <T = Promise<AsyncIterator<TagSubscription>>>() => T;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CampusNullablePromise
  extends Promise<Campus | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  admin_id: () => Promise<String>;
  departments: <T = FragmentableArray<Tag>>() => T;
  name: () => Promise<String>;
}

export interface Tag {
  name: String;
  id: String;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  name: () => Promise<String>;
  id: () => Promise<String>;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<String>>;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  name: () => Promise<String>;
  id: () => Promise<String>;
}

export interface CampusConnection {
  pageInfo: PageInfo;
  edges: CampusEdge[];
}

export interface CampusConnectionPromise
  extends Promise<CampusConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CampusEdge>>() => T;
  aggregate: <T = AggregateCampusPromise>() => T;
}

export interface CampusConnectionSubscription
  extends Promise<AsyncIterator<CampusConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CampusEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCampusSubscription>() => T;
}

export interface CampusEdge {
  node: Campus;
  cursor: String;
}

export interface CampusEdgePromise extends Promise<CampusEdge>, Fragmentable {
  node: <T = CampusPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CampusEdgeSubscription
  extends Promise<AsyncIterator<CampusEdge>>,
    Fragmentable {
  node: <T = CampusSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCampus {
  count: Int;
}

export interface AggregateCampusPromise
  extends Promise<AggregateCampus>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCampusSubscription
  extends Promise<AsyncIterator<AggregateCampus>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Course {
  id: ID_Output;
  branch: String;
  coordinator_id: String;
  name: String;
  automated?: Boolean;
  campus: String;
}

export interface CoursePromise extends Promise<Course>, Fragmentable {
  id: () => Promise<ID_Output>;
  branch: () => Promise<String>;
  coordinator_id: () => Promise<String>;
  name: () => Promise<String>;
  automated: () => Promise<Boolean>;
  campus: () => Promise<String>;
}

export interface CourseSubscription
  extends Promise<AsyncIterator<Course>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  branch: () => Promise<AsyncIterator<String>>;
  coordinator_id: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  automated: () => Promise<AsyncIterator<Boolean>>;
  campus: () => Promise<AsyncIterator<String>>;
}

export interface CourseNullablePromise
  extends Promise<Course | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  branch: () => Promise<String>;
  coordinator_id: () => Promise<String>;
  name: () => Promise<String>;
  automated: () => Promise<Boolean>;
  campus: () => Promise<String>;
}

export interface CourseConnection {
  pageInfo: PageInfo;
  edges: CourseEdge[];
}

export interface CourseConnectionPromise
  extends Promise<CourseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseEdge>>() => T;
  aggregate: <T = AggregateCoursePromise>() => T;
}

export interface CourseConnectionSubscription
  extends Promise<AsyncIterator<CourseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseSubscription>() => T;
}

export interface CourseEdge {
  node: Course;
  cursor: String;
}

export interface CourseEdgePromise extends Promise<CourseEdge>, Fragmentable {
  node: <T = CoursePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseEdgeSubscription
  extends Promise<AsyncIterator<CourseEdge>>,
    Fragmentable {
  node: <T = CourseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCourse {
  count: Int;
}

export interface AggregateCoursePromise
  extends Promise<AggregateCourse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseSubscription
  extends Promise<AsyncIterator<AggregateCourse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CourseInstance {
  id: ID_Output;
  studID: String;
  facultyID: String;
  questions?: <T = FragmentableArray<Link>>() => T;
  completed: Int;
  total: Int;
  course: String;
  campus: String;
  department: String;
  status: Boolean;
  studentName: String;
  studentReg: String;
  correct: Int;
}

export interface CourseInstancePromise
  extends Promise<CourseInstance>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  studID: () => Promise<String>;
  facultyID: () => Promise<String>;
  questions: <T = FragmentableArray<Link>>() => T;
  completed: () => Promise<Int>;
  total: () => Promise<Int>;
  course: () => Promise<String>;
  campus: () => Promise<String>;
  department: () => Promise<String>;
  status: () => Promise<Boolean>;
  studentName: () => Promise<String>;
  studentReg: () => Promise<String>;
  correct: () => Promise<Int>;
}

export interface CourseInstanceSubscription
  extends Promise<AsyncIterator<CourseInstance>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  studID: () => Promise<AsyncIterator<String>>;
  facultyID: () => Promise<AsyncIterator<String>>;
  questions: <T = Promise<AsyncIterator<LinkSubscription>>>() => T;
  completed: () => Promise<AsyncIterator<Int>>;
  total: () => Promise<AsyncIterator<Int>>;
  course: () => Promise<AsyncIterator<String>>;
  campus: () => Promise<AsyncIterator<String>>;
  department: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  studentName: () => Promise<AsyncIterator<String>>;
  studentReg: () => Promise<AsyncIterator<String>>;
  correct: () => Promise<AsyncIterator<Int>>;
}

export interface CourseInstanceNullablePromise
  extends Promise<CourseInstance | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  studID: () => Promise<String>;
  facultyID: () => Promise<String>;
  questions: <T = FragmentableArray<Link>>() => T;
  completed: () => Promise<Int>;
  total: () => Promise<Int>;
  course: () => Promise<String>;
  campus: () => Promise<String>;
  department: () => Promise<String>;
  status: () => Promise<Boolean>;
  studentName: () => Promise<String>;
  studentReg: () => Promise<String>;
  correct: () => Promise<Int>;
}

export interface Link {
  id: String;
  status: Int;
  ans?: String;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<String>;
  status: () => Promise<Int>;
  ans: () => Promise<String>;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  ans: () => Promise<AsyncIterator<String>>;
}

export interface LinkNullablePromise
  extends Promise<Link | null>,
    Fragmentable {
  id: () => Promise<String>;
  status: () => Promise<Int>;
  ans: () => Promise<String>;
}

export interface CourseInstanceConnection {
  pageInfo: PageInfo;
  edges: CourseInstanceEdge[];
}

export interface CourseInstanceConnectionPromise
  extends Promise<CourseInstanceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseInstanceEdge>>() => T;
  aggregate: <T = AggregateCourseInstancePromise>() => T;
}

export interface CourseInstanceConnectionSubscription
  extends Promise<AsyncIterator<CourseInstanceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseInstanceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseInstanceSubscription>() => T;
}

export interface CourseInstanceEdge {
  node: CourseInstance;
  cursor: String;
}

export interface CourseInstanceEdgePromise
  extends Promise<CourseInstanceEdge>,
    Fragmentable {
  node: <T = CourseInstancePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseInstanceEdgeSubscription
  extends Promise<AsyncIterator<CourseInstanceEdge>>,
    Fragmentable {
  node: <T = CourseInstanceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCourseInstance {
  count: Int;
}

export interface AggregateCourseInstancePromise
  extends Promise<AggregateCourseInstance>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseInstanceSubscription
  extends Promise<AsyncIterator<AggregateCourseInstance>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Global {
  regs?: Boolean;
  regf?: Boolean;
  defaultCourses?: <T = FragmentableArray<DefaultCourse>>() => T;
  id: String;
  _id: ID_Output;
}

export interface GlobalPromise extends Promise<Global>, Fragmentable {
  regs: () => Promise<Boolean>;
  regf: () => Promise<Boolean>;
  defaultCourses: <T = FragmentableArray<DefaultCourse>>() => T;
  id: () => Promise<String>;
  _id: () => Promise<ID_Output>;
}

export interface GlobalSubscription
  extends Promise<AsyncIterator<Global>>,
    Fragmentable {
  regs: () => Promise<AsyncIterator<Boolean>>;
  regf: () => Promise<AsyncIterator<Boolean>>;
  defaultCourses: <
    T = Promise<AsyncIterator<DefaultCourseSubscription>>
  >() => T;
  id: () => Promise<AsyncIterator<String>>;
  _id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface GlobalNullablePromise
  extends Promise<Global | null>,
    Fragmentable {
  regs: () => Promise<Boolean>;
  regf: () => Promise<Boolean>;
  defaultCourses: <T = FragmentableArray<DefaultCourse>>() => T;
  id: () => Promise<String>;
  _id: () => Promise<ID_Output>;
}

export interface DefaultCourse {
  name: String;
  branch: String;
  automated?: Boolean;
}

export interface DefaultCoursePromise
  extends Promise<DefaultCourse>,
    Fragmentable {
  name: () => Promise<String>;
  branch: () => Promise<String>;
  automated: () => Promise<Boolean>;
}

export interface DefaultCourseSubscription
  extends Promise<AsyncIterator<DefaultCourse>>,
    Fragmentable {
  name: () => Promise<AsyncIterator<String>>;
  branch: () => Promise<AsyncIterator<String>>;
  automated: () => Promise<AsyncIterator<Boolean>>;
}

export interface DefaultCourseNullablePromise
  extends Promise<DefaultCourse | null>,
    Fragmentable {
  name: () => Promise<String>;
  branch: () => Promise<String>;
  automated: () => Promise<Boolean>;
}

export interface GlobalConnection {
  pageInfo: PageInfo;
  edges: GlobalEdge[];
}

export interface GlobalConnectionPromise
  extends Promise<GlobalConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GlobalEdge>>() => T;
  aggregate: <T = AggregateGlobalPromise>() => T;
}

export interface GlobalConnectionSubscription
  extends Promise<AsyncIterator<GlobalConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GlobalEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGlobalSubscription>() => T;
}

export interface GlobalEdge {
  node: Global;
  cursor: String;
}

export interface GlobalEdgePromise extends Promise<GlobalEdge>, Fragmentable {
  node: <T = GlobalPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GlobalEdgeSubscription
  extends Promise<AsyncIterator<GlobalEdge>>,
    Fragmentable {
  node: <T = GlobalSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGlobal {
  count: Int;
}

export interface AggregateGlobalPromise
  extends Promise<AggregateGlobal>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGlobalSubscription
  extends Promise<AsyncIterator<AggregateGlobal>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Problem {
  id: ID_Output;
  queID: String;
  studID: String;
  description: String;
  status: Int;
  course: String;
  campus?: String;
  department?: String;
  facultyID: String;
}

export interface ProblemPromise extends Promise<Problem>, Fragmentable {
  id: () => Promise<ID_Output>;
  queID: () => Promise<String>;
  studID: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<Int>;
  course: () => Promise<String>;
  campus: () => Promise<String>;
  department: () => Promise<String>;
  facultyID: () => Promise<String>;
}

export interface ProblemSubscription
  extends Promise<AsyncIterator<Problem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  queID: () => Promise<AsyncIterator<String>>;
  studID: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  course: () => Promise<AsyncIterator<String>>;
  campus: () => Promise<AsyncIterator<String>>;
  department: () => Promise<AsyncIterator<String>>;
  facultyID: () => Promise<AsyncIterator<String>>;
}

export interface ProblemNullablePromise
  extends Promise<Problem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  queID: () => Promise<String>;
  studID: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<Int>;
  course: () => Promise<String>;
  campus: () => Promise<String>;
  department: () => Promise<String>;
  facultyID: () => Promise<String>;
}

export interface ProblemConnection {
  pageInfo: PageInfo;
  edges: ProblemEdge[];
}

export interface ProblemConnectionPromise
  extends Promise<ProblemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProblemEdge>>() => T;
  aggregate: <T = AggregateProblemPromise>() => T;
}

export interface ProblemConnectionSubscription
  extends Promise<AsyncIterator<ProblemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProblemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProblemSubscription>() => T;
}

export interface ProblemEdge {
  node: Problem;
  cursor: String;
}

export interface ProblemEdgePromise extends Promise<ProblemEdge>, Fragmentable {
  node: <T = ProblemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProblemEdgeSubscription
  extends Promise<AsyncIterator<ProblemEdge>>,
    Fragmentable {
  node: <T = ProblemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProblem {
  count: Int;
}

export interface AggregateProblemPromise
  extends Promise<AggregateProblem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProblemSubscription
  extends Promise<AsyncIterator<AggregateProblem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Question {
  id: ID_Output;
  course: String;
  name: String;
  desc: String;
  exp: String;
  opt: Options;
  ans: String;
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  course: () => Promise<String>;
  name: () => Promise<String>;
  desc: () => Promise<String>;
  exp: () => Promise<String>;
  opt: <T = OptionsPromise>() => T;
  ans: () => Promise<String>;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  course: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  desc: () => Promise<AsyncIterator<String>>;
  exp: () => Promise<AsyncIterator<String>>;
  opt: <T = OptionsSubscription>() => T;
  ans: () => Promise<AsyncIterator<String>>;
}

export interface QuestionNullablePromise
  extends Promise<Question | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  course: () => Promise<String>;
  name: () => Promise<String>;
  desc: () => Promise<String>;
  exp: () => Promise<String>;
  opt: <T = OptionsPromise>() => T;
  ans: () => Promise<String>;
}

export interface Options {
  a: String;
  b: String;
  c: String;
  d: String;
}

export interface OptionsPromise extends Promise<Options>, Fragmentable {
  a: () => Promise<String>;
  b: () => Promise<String>;
  c: () => Promise<String>;
  d: () => Promise<String>;
}

export interface OptionsSubscription
  extends Promise<AsyncIterator<Options>>,
    Fragmentable {
  a: () => Promise<AsyncIterator<String>>;
  b: () => Promise<AsyncIterator<String>>;
  c: () => Promise<AsyncIterator<String>>;
  d: () => Promise<AsyncIterator<String>>;
}

export interface OptionsNullablePromise
  extends Promise<Options | null>,
    Fragmentable {
  a: () => Promise<String>;
  b: () => Promise<String>;
  c: () => Promise<String>;
  d: () => Promise<String>;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Recovery {
  id: ID_Output;
  token: String;
  username: String;
  email: String;
}

export interface RecoveryPromise extends Promise<Recovery>, Fragmentable {
  id: () => Promise<ID_Output>;
  token: () => Promise<String>;
  username: () => Promise<String>;
  email: () => Promise<String>;
}

export interface RecoverySubscription
  extends Promise<AsyncIterator<Recovery>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  token: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface RecoveryNullablePromise
  extends Promise<Recovery | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  token: () => Promise<String>;
  username: () => Promise<String>;
  email: () => Promise<String>;
}

export interface RecoveryConnection {
  pageInfo: PageInfo;
  edges: RecoveryEdge[];
}

export interface RecoveryConnectionPromise
  extends Promise<RecoveryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecoveryEdge>>() => T;
  aggregate: <T = AggregateRecoveryPromise>() => T;
}

export interface RecoveryConnectionSubscription
  extends Promise<AsyncIterator<RecoveryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecoveryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecoverySubscription>() => T;
}

export interface RecoveryEdge {
  node: Recovery;
  cursor: String;
}

export interface RecoveryEdgePromise
  extends Promise<RecoveryEdge>,
    Fragmentable {
  node: <T = RecoveryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecoveryEdgeSubscription
  extends Promise<AsyncIterator<RecoveryEdge>>,
    Fragmentable {
  node: <T = RecoverySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRecovery {
  count: Int;
}

export interface AggregateRecoveryPromise
  extends Promise<AggregateRecovery>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecoverySubscription
  extends Promise<AsyncIterator<AggregateRecovery>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  username: String;
  password: String;
  name: String;
  campus?: String;
  department?: String;
  dob?: DateTimeOutput;
  email: String;
  level: Int;
  id: ID_Output;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  username: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  campus: () => Promise<String>;
  department: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  level: () => Promise<Int>;
  id: () => Promise<ID_Output>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  campus: () => Promise<AsyncIterator<String>>;
  department: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  username: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  campus: () => Promise<String>;
  department: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  level: () => Promise<Int>;
  id: () => Promise<ID_Output>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BranchSubscriptionPayload {
  mutation: MutationType;
  node: Branch;
  updatedFields: String[];
  previousValues: BranchPreviousValues;
}

export interface BranchSubscriptionPayloadPromise
  extends Promise<BranchSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BranchPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BranchPreviousValuesPromise>() => T;
}

export interface BranchSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BranchSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BranchSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BranchPreviousValuesSubscription>() => T;
}

export interface BranchPreviousValues {
  id: ID_Output;
  name: String;
}

export interface BranchPreviousValuesPromise
  extends Promise<BranchPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface BranchPreviousValuesSubscription
  extends Promise<AsyncIterator<BranchPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CampusSubscriptionPayload {
  mutation: MutationType;
  node: Campus;
  updatedFields: String[];
  previousValues: CampusPreviousValues;
}

export interface CampusSubscriptionPayloadPromise
  extends Promise<CampusSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CampusPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CampusPreviousValuesPromise>() => T;
}

export interface CampusSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CampusSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CampusSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CampusPreviousValuesSubscription>() => T;
}

export interface CampusPreviousValues {
  id: ID_Output;
  admin_id: String;
  name: String;
}

export interface CampusPreviousValuesPromise
  extends Promise<CampusPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  admin_id: () => Promise<String>;
  name: () => Promise<String>;
}

export interface CampusPreviousValuesSubscription
  extends Promise<AsyncIterator<CampusPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  admin_id: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CourseSubscriptionPayload {
  mutation: MutationType;
  node: Course;
  updatedFields: String[];
  previousValues: CoursePreviousValues;
}

export interface CourseSubscriptionPayloadPromise
  extends Promise<CourseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoursePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoursePreviousValuesPromise>() => T;
}

export interface CourseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoursePreviousValuesSubscription>() => T;
}

export interface CoursePreviousValues {
  id: ID_Output;
  branch: String;
  coordinator_id: String;
  name: String;
  automated?: Boolean;
  campus: String;
}

export interface CoursePreviousValuesPromise
  extends Promise<CoursePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  branch: () => Promise<String>;
  coordinator_id: () => Promise<String>;
  name: () => Promise<String>;
  automated: () => Promise<Boolean>;
  campus: () => Promise<String>;
}

export interface CoursePreviousValuesSubscription
  extends Promise<AsyncIterator<CoursePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  branch: () => Promise<AsyncIterator<String>>;
  coordinator_id: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  automated: () => Promise<AsyncIterator<Boolean>>;
  campus: () => Promise<AsyncIterator<String>>;
}

export interface CourseInstanceSubscriptionPayload {
  mutation: MutationType;
  node: CourseInstance;
  updatedFields: String[];
  previousValues: CourseInstancePreviousValues;
}

export interface CourseInstanceSubscriptionPayloadPromise
  extends Promise<CourseInstanceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CourseInstancePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CourseInstancePreviousValuesPromise>() => T;
}

export interface CourseInstanceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseInstanceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseInstanceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CourseInstancePreviousValuesSubscription>() => T;
}

export interface CourseInstancePreviousValues {
  id: ID_Output;
  studID: String;
  facultyID: String;
  completed: Int;
  total: Int;
  course: String;
  campus: String;
  department: String;
  status: Boolean;
  studentName: String;
  studentReg: String;
  correct: Int;
}

export interface CourseInstancePreviousValuesPromise
  extends Promise<CourseInstancePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  studID: () => Promise<String>;
  facultyID: () => Promise<String>;
  completed: () => Promise<Int>;
  total: () => Promise<Int>;
  course: () => Promise<String>;
  campus: () => Promise<String>;
  department: () => Promise<String>;
  status: () => Promise<Boolean>;
  studentName: () => Promise<String>;
  studentReg: () => Promise<String>;
  correct: () => Promise<Int>;
}

export interface CourseInstancePreviousValuesSubscription
  extends Promise<AsyncIterator<CourseInstancePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  studID: () => Promise<AsyncIterator<String>>;
  facultyID: () => Promise<AsyncIterator<String>>;
  completed: () => Promise<AsyncIterator<Int>>;
  total: () => Promise<AsyncIterator<Int>>;
  course: () => Promise<AsyncIterator<String>>;
  campus: () => Promise<AsyncIterator<String>>;
  department: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  studentName: () => Promise<AsyncIterator<String>>;
  studentReg: () => Promise<AsyncIterator<String>>;
  correct: () => Promise<AsyncIterator<Int>>;
}

export interface GlobalSubscriptionPayload {
  mutation: MutationType;
  node: Global;
  updatedFields: String[];
  previousValues: GlobalPreviousValues;
}

export interface GlobalSubscriptionPayloadPromise
  extends Promise<GlobalSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GlobalPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GlobalPreviousValuesPromise>() => T;
}

export interface GlobalSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GlobalSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GlobalSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GlobalPreviousValuesSubscription>() => T;
}

export interface GlobalPreviousValues {
  regs?: Boolean;
  regf?: Boolean;
  id: String;
  _id: ID_Output;
}

export interface GlobalPreviousValuesPromise
  extends Promise<GlobalPreviousValues>,
    Fragmentable {
  regs: () => Promise<Boolean>;
  regf: () => Promise<Boolean>;
  id: () => Promise<String>;
  _id: () => Promise<ID_Output>;
}

export interface GlobalPreviousValuesSubscription
  extends Promise<AsyncIterator<GlobalPreviousValues>>,
    Fragmentable {
  regs: () => Promise<AsyncIterator<Boolean>>;
  regf: () => Promise<AsyncIterator<Boolean>>;
  id: () => Promise<AsyncIterator<String>>;
  _id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface ProblemSubscriptionPayload {
  mutation: MutationType;
  node: Problem;
  updatedFields: String[];
  previousValues: ProblemPreviousValues;
}

export interface ProblemSubscriptionPayloadPromise
  extends Promise<ProblemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProblemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProblemPreviousValuesPromise>() => T;
}

export interface ProblemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProblemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProblemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProblemPreviousValuesSubscription>() => T;
}

export interface ProblemPreviousValues {
  id: ID_Output;
  queID: String;
  studID: String;
  description: String;
  status: Int;
  course: String;
  campus?: String;
  department?: String;
  facultyID: String;
}

export interface ProblemPreviousValuesPromise
  extends Promise<ProblemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  queID: () => Promise<String>;
  studID: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<Int>;
  course: () => Promise<String>;
  campus: () => Promise<String>;
  department: () => Promise<String>;
  facultyID: () => Promise<String>;
}

export interface ProblemPreviousValuesSubscription
  extends Promise<AsyncIterator<ProblemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  queID: () => Promise<AsyncIterator<String>>;
  studID: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Int>>;
  course: () => Promise<AsyncIterator<String>>;
  campus: () => Promise<AsyncIterator<String>>;
  department: () => Promise<AsyncIterator<String>>;
  facultyID: () => Promise<AsyncIterator<String>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  course: String;
  name: String;
  desc: String;
  exp: String;
  ans: String;
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  course: () => Promise<String>;
  name: () => Promise<String>;
  desc: () => Promise<String>;
  exp: () => Promise<String>;
  ans: () => Promise<String>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  course: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  desc: () => Promise<AsyncIterator<String>>;
  exp: () => Promise<AsyncIterator<String>>;
  ans: () => Promise<AsyncIterator<String>>;
}

export interface RecoverySubscriptionPayload {
  mutation: MutationType;
  node: Recovery;
  updatedFields: String[];
  previousValues: RecoveryPreviousValues;
}

export interface RecoverySubscriptionPayloadPromise
  extends Promise<RecoverySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecoveryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecoveryPreviousValuesPromise>() => T;
}

export interface RecoverySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecoverySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecoverySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecoveryPreviousValuesSubscription>() => T;
}

export interface RecoveryPreviousValues {
  id: ID_Output;
  token: String;
  username: String;
  email: String;
}

export interface RecoveryPreviousValuesPromise
  extends Promise<RecoveryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  token: () => Promise<String>;
  username: () => Promise<String>;
  email: () => Promise<String>;
}

export interface RecoveryPreviousValuesSubscription
  extends Promise<AsyncIterator<RecoveryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  token: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  username: String;
  password: String;
  name: String;
  campus?: String;
  department?: String;
  dob?: DateTimeOutput;
  email: String;
  level: Int;
  id: ID_Output;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  username: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  campus: () => Promise<String>;
  department: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  level: () => Promise<Int>;
  id: () => Promise<ID_Output>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  campus: () => Promise<AsyncIterator<String>>;
  department: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Problem",
    embedded: false
  },
  {
    name: "CourseInstance",
    embedded: false
  },
  {
    name: "Link",
    embedded: true
  },
  {
    name: "Global",
    embedded: false
  },
  {
    name: "DefaultCourse",
    embedded: true
  },
  {
    name: "Tag",
    embedded: true
  },
  {
    name: "Campus",
    embedded: false
  },
  {
    name: "Branch",
    embedded: false
  },
  {
    name: "Course",
    embedded: false
  },
  {
    name: "Question",
    embedded: false
  },
  {
    name: "Options",
    embedded: true
  },
  {
    name: "Recovery",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
