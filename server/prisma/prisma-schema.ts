// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateBranch {
  count: Int!
}

type AggregateCampus {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateCourseInstance {
  count: Int!
}

type AggregateGlobal {
  count: Int!
}

type AggregateProblem {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateRecovery {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Branch {
  id: ID!
  name: String!
}

type BranchConnection {
  pageInfo: PageInfo!
  edges: [BranchEdge]!
  aggregate: AggregateBranch!
}

input BranchCreateInput {
  id: ID
  name: String!
}

type BranchEdge {
  node: Branch!
  cursor: String!
}

enum BranchOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type BranchPreviousValues {
  id: ID!
  name: String!
}

type BranchSubscriptionPayload {
  mutation: MutationType!
  node: Branch
  updatedFields: [String!]
  previousValues: BranchPreviousValues
}

input BranchSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BranchWhereInput
  AND: [BranchSubscriptionWhereInput!]
}

input BranchUpdateInput {
  name: String
}

input BranchUpdateManyMutationInput {
  name: String
}

input BranchWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [BranchWhereInput!]
}

input BranchWhereUniqueInput {
  id: ID
  name: String
}

type Campus {
  id: ID!
  admin_id: String!
  departments: [Tag!]
  name: String!
}

type CampusConnection {
  pageInfo: PageInfo!
  edges: [CampusEdge]!
  aggregate: AggregateCampus!
}

input CampusCreateInput {
  id: ID
  admin_id: String!
  departments: TagCreateManyInput
  name: String!
}

type CampusEdge {
  node: Campus!
  cursor: String!
}

enum CampusOrderByInput {
  id_ASC
  id_DESC
  admin_id_ASC
  admin_id_DESC
  name_ASC
  name_DESC
}

type CampusPreviousValues {
  id: ID!
  admin_id: String!
  name: String!
}

type CampusSubscriptionPayload {
  mutation: MutationType!
  node: Campus
  updatedFields: [String!]
  previousValues: CampusPreviousValues
}

input CampusSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CampusWhereInput
  AND: [CampusSubscriptionWhereInput!]
}

input CampusUpdateInput {
  admin_id: String
  departments: TagUpdateManyInput
  name: String
}

input CampusUpdateManyMutationInput {
  admin_id: String
  name: String
}

input CampusWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  admin_id: String
  admin_id_not: String
  admin_id_in: [String!]
  admin_id_not_in: [String!]
  admin_id_lt: String
  admin_id_lte: String
  admin_id_gt: String
  admin_id_gte: String
  admin_id_contains: String
  admin_id_not_contains: String
  admin_id_starts_with: String
  admin_id_not_starts_with: String
  admin_id_ends_with: String
  admin_id_not_ends_with: String
  departments_some: TagWhereInput
  departments_every: TagRestrictedWhereInput
  departments_none: TagRestrictedWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CampusWhereInput!]
}

input CampusWhereUniqueInput {
  id: ID
  name: String
}

type Course {
  id: ID!
  branch: String!
  coordinator_id: String!
  name: String!
  automated: Boolean
  campus: String!
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  id: ID
  branch: String!
  coordinator_id: String!
  name: String!
  automated: Boolean
  campus: String!
}

type CourseEdge {
  node: Course!
  cursor: String!
}

type CourseInstance {
  id: ID!
  studID: String!
  facultyID: String!
  questions: [Link!]
  completed: Int!
  total: Int!
  course: String!
  campus: String!
  department: String!
  status: Boolean!
  studentName: String!
  studentReg: String!
  correct: Int!
}

type CourseInstanceConnection {
  pageInfo: PageInfo!
  edges: [CourseInstanceEdge]!
  aggregate: AggregateCourseInstance!
}

input CourseInstanceCreateInput {
  id: ID
  studID: String!
  facultyID: String!
  questions: LinkCreateManyInput
  completed: Int
  total: Int
  course: String!
  campus: String!
  department: String!
  status: Boolean!
  studentName: String!
  studentReg: String!
  correct: Int
}

type CourseInstanceEdge {
  node: CourseInstance!
  cursor: String!
}

enum CourseInstanceOrderByInput {
  id_ASC
  id_DESC
  studID_ASC
  studID_DESC
  facultyID_ASC
  facultyID_DESC
  completed_ASC
  completed_DESC
  total_ASC
  total_DESC
  course_ASC
  course_DESC
  campus_ASC
  campus_DESC
  department_ASC
  department_DESC
  status_ASC
  status_DESC
  studentName_ASC
  studentName_DESC
  studentReg_ASC
  studentReg_DESC
  correct_ASC
  correct_DESC
}

type CourseInstancePreviousValues {
  id: ID!
  studID: String!
  facultyID: String!
  completed: Int!
  total: Int!
  course: String!
  campus: String!
  department: String!
  status: Boolean!
  studentName: String!
  studentReg: String!
  correct: Int!
}

type CourseInstanceSubscriptionPayload {
  mutation: MutationType!
  node: CourseInstance
  updatedFields: [String!]
  previousValues: CourseInstancePreviousValues
}

input CourseInstanceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseInstanceWhereInput
  AND: [CourseInstanceSubscriptionWhereInput!]
}

input CourseInstanceUpdateInput {
  studID: String
  facultyID: String
  questions: LinkUpdateManyInput
  completed: Int
  total: Int
  course: String
  campus: String
  department: String
  status: Boolean
  studentName: String
  studentReg: String
  correct: Int
}

input CourseInstanceUpdateManyMutationInput {
  studID: String
  facultyID: String
  completed: Int
  total: Int
  course: String
  campus: String
  department: String
  status: Boolean
  studentName: String
  studentReg: String
  correct: Int
}

input CourseInstanceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  studID: String
  studID_not: String
  studID_in: [String!]
  studID_not_in: [String!]
  studID_lt: String
  studID_lte: String
  studID_gt: String
  studID_gte: String
  studID_contains: String
  studID_not_contains: String
  studID_starts_with: String
  studID_not_starts_with: String
  studID_ends_with: String
  studID_not_ends_with: String
  facultyID: String
  facultyID_not: String
  facultyID_in: [String!]
  facultyID_not_in: [String!]
  facultyID_lt: String
  facultyID_lte: String
  facultyID_gt: String
  facultyID_gte: String
  facultyID_contains: String
  facultyID_not_contains: String
  facultyID_starts_with: String
  facultyID_not_starts_with: String
  facultyID_ends_with: String
  facultyID_not_ends_with: String
  questions_some: LinkWhereInput
  questions_every: LinkRestrictedWhereInput
  questions_none: LinkRestrictedWhereInput
  completed: Int
  completed_not: Int
  completed_in: [Int!]
  completed_not_in: [Int!]
  completed_lt: Int
  completed_lte: Int
  completed_gt: Int
  completed_gte: Int
  total: Int
  total_not: Int
  total_in: [Int!]
  total_not_in: [Int!]
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  course: String
  course_not: String
  course_in: [String!]
  course_not_in: [String!]
  course_lt: String
  course_lte: String
  course_gt: String
  course_gte: String
  course_contains: String
  course_not_contains: String
  course_starts_with: String
  course_not_starts_with: String
  course_ends_with: String
  course_not_ends_with: String
  campus: String
  campus_not: String
  campus_in: [String!]
  campus_not_in: [String!]
  campus_lt: String
  campus_lte: String
  campus_gt: String
  campus_gte: String
  campus_contains: String
  campus_not_contains: String
  campus_starts_with: String
  campus_not_starts_with: String
  campus_ends_with: String
  campus_not_ends_with: String
  department: String
  department_not: String
  department_in: [String!]
  department_not_in: [String!]
  department_lt: String
  department_lte: String
  department_gt: String
  department_gte: String
  department_contains: String
  department_not_contains: String
  department_starts_with: String
  department_not_starts_with: String
  department_ends_with: String
  department_not_ends_with: String
  status: Boolean
  status_not: Boolean
  studentName: String
  studentName_not: String
  studentName_in: [String!]
  studentName_not_in: [String!]
  studentName_lt: String
  studentName_lte: String
  studentName_gt: String
  studentName_gte: String
  studentName_contains: String
  studentName_not_contains: String
  studentName_starts_with: String
  studentName_not_starts_with: String
  studentName_ends_with: String
  studentName_not_ends_with: String
  studentReg: String
  studentReg_not: String
  studentReg_in: [String!]
  studentReg_not_in: [String!]
  studentReg_lt: String
  studentReg_lte: String
  studentReg_gt: String
  studentReg_gte: String
  studentReg_contains: String
  studentReg_not_contains: String
  studentReg_starts_with: String
  studentReg_not_starts_with: String
  studentReg_ends_with: String
  studentReg_not_ends_with: String
  correct: Int
  correct_not: Int
  correct_in: [Int!]
  correct_not_in: [Int!]
  correct_lt: Int
  correct_lte: Int
  correct_gt: Int
  correct_gte: Int
  AND: [CourseInstanceWhereInput!]
}

input CourseInstanceWhereUniqueInput {
  id: ID
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  branch_ASC
  branch_DESC
  coordinator_id_ASC
  coordinator_id_DESC
  name_ASC
  name_DESC
  automated_ASC
  automated_DESC
  campus_ASC
  campus_DESC
}

type CoursePreviousValues {
  id: ID!
  branch: String!
  coordinator_id: String!
  name: String!
  automated: Boolean
  campus: String!
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
}

input CourseUpdateInput {
  branch: String
  coordinator_id: String
  name: String
  automated: Boolean
  campus: String
}

input CourseUpdateManyMutationInput {
  branch: String
  coordinator_id: String
  name: String
  automated: Boolean
  campus: String
}

input CourseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  branch: String
  branch_not: String
  branch_in: [String!]
  branch_not_in: [String!]
  branch_lt: String
  branch_lte: String
  branch_gt: String
  branch_gte: String
  branch_contains: String
  branch_not_contains: String
  branch_starts_with: String
  branch_not_starts_with: String
  branch_ends_with: String
  branch_not_ends_with: String
  coordinator_id: String
  coordinator_id_not: String
  coordinator_id_in: [String!]
  coordinator_id_not_in: [String!]
  coordinator_id_lt: String
  coordinator_id_lte: String
  coordinator_id_gt: String
  coordinator_id_gte: String
  coordinator_id_contains: String
  coordinator_id_not_contains: String
  coordinator_id_starts_with: String
  coordinator_id_not_starts_with: String
  coordinator_id_ends_with: String
  coordinator_id_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  automated: Boolean
  automated_not: Boolean
  campus: String
  campus_not: String
  campus_in: [String!]
  campus_not_in: [String!]
  campus_lt: String
  campus_lte: String
  campus_gt: String
  campus_gte: String
  campus_contains: String
  campus_not_contains: String
  campus_starts_with: String
  campus_not_starts_with: String
  campus_ends_with: String
  campus_not_ends_with: String
  AND: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type DefaultCourse {
  name: String!
  branch: String!
  automated: Boolean
}

input DefaultCourseCreateInput {
  name: String!
  branch: String!
  automated: Boolean
}

input DefaultCourseCreateManyInput {
  create: [DefaultCourseCreateInput!]
}

input DefaultCourseRestrictedWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  branch: String
  branch_not: String
  branch_in: [String!]
  branch_not_in: [String!]
  branch_lt: String
  branch_lte: String
  branch_gt: String
  branch_gte: String
  branch_contains: String
  branch_not_contains: String
  branch_starts_with: String
  branch_not_starts_with: String
  branch_ends_with: String
  branch_not_ends_with: String
  automated: Boolean
  automated_not: Boolean
  AND: [DefaultCourseRestrictedWhereInput!]
}

input DefaultCourseScalarWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  branch: String
  branch_not: String
  branch_in: [String!]
  branch_not_in: [String!]
  branch_lt: String
  branch_lte: String
  branch_gt: String
  branch_gte: String
  branch_contains: String
  branch_not_contains: String
  branch_starts_with: String
  branch_not_starts_with: String
  branch_ends_with: String
  branch_not_ends_with: String
  automated: Boolean
  automated_not: Boolean
  AND: [DefaultCourseScalarWhereInput!]
  OR: [DefaultCourseScalarWhereInput!]
  NOT: [DefaultCourseScalarWhereInput!]
}

input DefaultCourseUpdateManyDataInput {
  name: String
  branch: String
  automated: Boolean
}

input DefaultCourseUpdateManyInput {
  create: [DefaultCourseCreateInput!]
  deleteMany: [DefaultCourseScalarWhereInput!]
  updateMany: [DefaultCourseUpdateManyWithWhereNestedInput!]
}

input DefaultCourseUpdateManyWithWhereNestedInput {
  where: DefaultCourseScalarWhereInput!
  data: DefaultCourseUpdateManyDataInput!
}

input DefaultCourseWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  branch: String
  branch_not: String
  branch_in: [String!]
  branch_not_in: [String!]
  branch_lt: String
  branch_lte: String
  branch_gt: String
  branch_gte: String
  branch_contains: String
  branch_not_contains: String
  branch_starts_with: String
  branch_not_starts_with: String
  branch_ends_with: String
  branch_not_ends_with: String
  automated: Boolean
  automated_not: Boolean
  AND: [DefaultCourseWhereInput!]
}

type Global {
  regs: Boolean
  regf: Boolean
  defaultCourses: [DefaultCourse!]
  id: String!
  _id: ID!
}

type GlobalConnection {
  pageInfo: PageInfo!
  edges: [GlobalEdge]!
  aggregate: AggregateGlobal!
}

input GlobalCreateInput {
  regs: Boolean
  regf: Boolean
  defaultCourses: DefaultCourseCreateManyInput
  id: String
  _id: ID
}

type GlobalEdge {
  node: Global!
  cursor: String!
}

enum GlobalOrderByInput {
  regs_ASC
  regs_DESC
  regf_ASC
  regf_DESC
  id_ASC
  id_DESC
  _id_ASC
  _id_DESC
}

type GlobalPreviousValues {
  regs: Boolean
  regf: Boolean
  id: String!
  _id: ID!
}

type GlobalSubscriptionPayload {
  mutation: MutationType!
  node: Global
  updatedFields: [String!]
  previousValues: GlobalPreviousValues
}

input GlobalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GlobalWhereInput
  AND: [GlobalSubscriptionWhereInput!]
}

input GlobalUpdateInput {
  regs: Boolean
  regf: Boolean
  defaultCourses: DefaultCourseUpdateManyInput
  id: String
}

input GlobalUpdateManyMutationInput {
  regs: Boolean
  regf: Boolean
  id: String
}

input GlobalWhereInput {
  regs: Boolean
  regs_not: Boolean
  regf: Boolean
  regf_not: Boolean
  defaultCourses_some: DefaultCourseWhereInput
  defaultCourses_every: DefaultCourseRestrictedWhereInput
  defaultCourses_none: DefaultCourseRestrictedWhereInput
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  _id: ID
  _id_not: ID
  _id_in: [ID!]
  _id_not_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_gt: ID
  _id_gte: ID
  _id_contains: ID
  _id_not_contains: ID
  _id_starts_with: ID
  _id_not_starts_with: ID
  _id_ends_with: ID
  _id_not_ends_with: ID
  AND: [GlobalWhereInput!]
}

input GlobalWhereUniqueInput {
  id: String
  _id: ID
}

type Link {
  id: String!
  status: Int!
  ans: String
}

input LinkCreateInput {
  id: String!
  status: Int
  ans: String
}

input LinkCreateManyInput {
  create: [LinkCreateInput!]
}

input LinkRestrictedWhereInput {
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  ans: String
  ans_not: String
  ans_in: [String!]
  ans_not_in: [String!]
  ans_lt: String
  ans_lte: String
  ans_gt: String
  ans_gte: String
  ans_contains: String
  ans_not_contains: String
  ans_starts_with: String
  ans_not_starts_with: String
  ans_ends_with: String
  ans_not_ends_with: String
  AND: [LinkRestrictedWhereInput!]
}

input LinkScalarWhereInput {
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  ans: String
  ans_not: String
  ans_in: [String!]
  ans_not_in: [String!]
  ans_lt: String
  ans_lte: String
  ans_gt: String
  ans_gte: String
  ans_contains: String
  ans_not_contains: String
  ans_starts_with: String
  ans_not_starts_with: String
  ans_ends_with: String
  ans_not_ends_with: String
  AND: [LinkScalarWhereInput!]
  OR: [LinkScalarWhereInput!]
  NOT: [LinkScalarWhereInput!]
}

input LinkUpdateManyDataInput {
  id: String
  status: Int
  ans: String
}

input LinkUpdateManyInput {
  create: [LinkCreateInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput!
  data: LinkUpdateManyDataInput!
}

input LinkWhereInput {
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  ans: String
  ans_not: String
  ans_in: [String!]
  ans_not_in: [String!]
  ans_lt: String
  ans_lte: String
  ans_gt: String
  ans_gte: String
  ans_contains: String
  ans_not_contains: String
  ans_starts_with: String
  ans_not_starts_with: String
  ans_ends_with: String
  ans_not_ends_with: String
  AND: [LinkWhereInput!]
}

scalar Long

type Mutation {
  createBranch(data: BranchCreateInput!): Branch!
  updateBranch(data: BranchUpdateInput!, where: BranchWhereUniqueInput!): Branch
  updateManyBranches(data: BranchUpdateManyMutationInput!, where: BranchWhereInput): BatchPayload!
  upsertBranch(where: BranchWhereUniqueInput!, create: BranchCreateInput!, update: BranchUpdateInput!): Branch!
  deleteBranch(where: BranchWhereUniqueInput!): Branch
  deleteManyBranches(where: BranchWhereInput): BatchPayload!
  createCampus(data: CampusCreateInput!): Campus!
  updateCampus(data: CampusUpdateInput!, where: CampusWhereUniqueInput!): Campus
  updateManyCampuses(data: CampusUpdateManyMutationInput!, where: CampusWhereInput): BatchPayload!
  upsertCampus(where: CampusWhereUniqueInput!, create: CampusCreateInput!, update: CampusUpdateInput!): Campus!
  deleteCampus(where: CampusWhereUniqueInput!): Campus
  deleteManyCampuses(where: CampusWhereInput): BatchPayload!
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createCourseInstance(data: CourseInstanceCreateInput!): CourseInstance!
  updateCourseInstance(data: CourseInstanceUpdateInput!, where: CourseInstanceWhereUniqueInput!): CourseInstance
  updateManyCourseInstances(data: CourseInstanceUpdateManyMutationInput!, where: CourseInstanceWhereInput): BatchPayload!
  upsertCourseInstance(where: CourseInstanceWhereUniqueInput!, create: CourseInstanceCreateInput!, update: CourseInstanceUpdateInput!): CourseInstance!
  deleteCourseInstance(where: CourseInstanceWhereUniqueInput!): CourseInstance
  deleteManyCourseInstances(where: CourseInstanceWhereInput): BatchPayload!
  createGlobal(data: GlobalCreateInput!): Global!
  updateGlobal(data: GlobalUpdateInput!, where: GlobalWhereUniqueInput!): Global
  updateManyGlobals(data: GlobalUpdateManyMutationInput!, where: GlobalWhereInput): BatchPayload!
  upsertGlobal(where: GlobalWhereUniqueInput!, create: GlobalCreateInput!, update: GlobalUpdateInput!): Global!
  deleteGlobal(where: GlobalWhereUniqueInput!): Global
  deleteManyGlobals(where: GlobalWhereInput): BatchPayload!
  createProblem(data: ProblemCreateInput!): Problem!
  updateProblem(data: ProblemUpdateInput!, where: ProblemWhereUniqueInput!): Problem
  updateManyProblems(data: ProblemUpdateManyMutationInput!, where: ProblemWhereInput): BatchPayload!
  upsertProblem(where: ProblemWhereUniqueInput!, create: ProblemCreateInput!, update: ProblemUpdateInput!): Problem!
  deleteProblem(where: ProblemWhereUniqueInput!): Problem
  deleteManyProblems(where: ProblemWhereInput): BatchPayload!
  createQuestion(data: QuestionCreateInput!): Question!
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateManyQuestions(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): BatchPayload!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  createRecovery(data: RecoveryCreateInput!): Recovery!
  updateRecovery(data: RecoveryUpdateInput!, where: RecoveryWhereUniqueInput!): Recovery
  updateManyRecoveries(data: RecoveryUpdateManyMutationInput!, where: RecoveryWhereInput): BatchPayload!
  upsertRecovery(where: RecoveryWhereUniqueInput!, create: RecoveryCreateInput!, update: RecoveryUpdateInput!): Recovery!
  deleteRecovery(where: RecoveryWhereUniqueInput!): Recovery
  deleteManyRecoveries(where: RecoveryWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Options {
  a: String!
  b: String!
  c: String!
  d: String!
}

input OptionsCreateInput {
  a: String!
  b: String!
  c: String!
  d: String!
}

input OptionsCreateOneInput {
  create: OptionsCreateInput
}

input OptionsUpdateDataInput {
  a: String
  b: String
  c: String
  d: String
}

input OptionsUpdateOneRequiredInput {
  create: OptionsCreateInput
  update: OptionsUpdateDataInput
  upsert: OptionsUpsertNestedInput
}

input OptionsUpsertNestedInput {
  update: OptionsUpdateDataInput!
  create: OptionsCreateInput!
}

input OptionsWhereInput {
  a: String
  a_not: String
  a_in: [String!]
  a_not_in: [String!]
  a_lt: String
  a_lte: String
  a_gt: String
  a_gte: String
  a_contains: String
  a_not_contains: String
  a_starts_with: String
  a_not_starts_with: String
  a_ends_with: String
  a_not_ends_with: String
  b: String
  b_not: String
  b_in: [String!]
  b_not_in: [String!]
  b_lt: String
  b_lte: String
  b_gt: String
  b_gte: String
  b_contains: String
  b_not_contains: String
  b_starts_with: String
  b_not_starts_with: String
  b_ends_with: String
  b_not_ends_with: String
  c: String
  c_not: String
  c_in: [String!]
  c_not_in: [String!]
  c_lt: String
  c_lte: String
  c_gt: String
  c_gte: String
  c_contains: String
  c_not_contains: String
  c_starts_with: String
  c_not_starts_with: String
  c_ends_with: String
  c_not_ends_with: String
  d: String
  d_not: String
  d_in: [String!]
  d_not_in: [String!]
  d_lt: String
  d_lte: String
  d_gt: String
  d_gte: String
  d_contains: String
  d_not_contains: String
  d_starts_with: String
  d_not_starts_with: String
  d_ends_with: String
  d_not_ends_with: String
  AND: [OptionsWhereInput!]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Problem {
  id: ID!
  queID: String!
  studID: String!
  description: String!
  status: Int!
  course: String!
  campus: String
  department: String
  facultyID: String!
}

type ProblemConnection {
  pageInfo: PageInfo!
  edges: [ProblemEdge]!
  aggregate: AggregateProblem!
}

input ProblemCreateInput {
  id: ID
  queID: String!
  studID: String!
  description: String!
  status: Int
  course: String!
  campus: String
  department: String
  facultyID: String!
}

type ProblemEdge {
  node: Problem!
  cursor: String!
}

enum ProblemOrderByInput {
  id_ASC
  id_DESC
  queID_ASC
  queID_DESC
  studID_ASC
  studID_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  course_ASC
  course_DESC
  campus_ASC
  campus_DESC
  department_ASC
  department_DESC
  facultyID_ASC
  facultyID_DESC
}

type ProblemPreviousValues {
  id: ID!
  queID: String!
  studID: String!
  description: String!
  status: Int!
  course: String!
  campus: String
  department: String
  facultyID: String!
}

type ProblemSubscriptionPayload {
  mutation: MutationType!
  node: Problem
  updatedFields: [String!]
  previousValues: ProblemPreviousValues
}

input ProblemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProblemWhereInput
  AND: [ProblemSubscriptionWhereInput!]
}

input ProblemUpdateInput {
  queID: String
  studID: String
  description: String
  status: Int
  course: String
  campus: String
  department: String
  facultyID: String
}

input ProblemUpdateManyMutationInput {
  queID: String
  studID: String
  description: String
  status: Int
  course: String
  campus: String
  department: String
  facultyID: String
}

input ProblemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  queID: String
  queID_not: String
  queID_in: [String!]
  queID_not_in: [String!]
  queID_lt: String
  queID_lte: String
  queID_gt: String
  queID_gte: String
  queID_contains: String
  queID_not_contains: String
  queID_starts_with: String
  queID_not_starts_with: String
  queID_ends_with: String
  queID_not_ends_with: String
  studID: String
  studID_not: String
  studID_in: [String!]
  studID_not_in: [String!]
  studID_lt: String
  studID_lte: String
  studID_gt: String
  studID_gte: String
  studID_contains: String
  studID_not_contains: String
  studID_starts_with: String
  studID_not_starts_with: String
  studID_ends_with: String
  studID_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  course: String
  course_not: String
  course_in: [String!]
  course_not_in: [String!]
  course_lt: String
  course_lte: String
  course_gt: String
  course_gte: String
  course_contains: String
  course_not_contains: String
  course_starts_with: String
  course_not_starts_with: String
  course_ends_with: String
  course_not_ends_with: String
  campus: String
  campus_not: String
  campus_in: [String!]
  campus_not_in: [String!]
  campus_lt: String
  campus_lte: String
  campus_gt: String
  campus_gte: String
  campus_contains: String
  campus_not_contains: String
  campus_starts_with: String
  campus_not_starts_with: String
  campus_ends_with: String
  campus_not_ends_with: String
  department: String
  department_not: String
  department_in: [String!]
  department_not_in: [String!]
  department_lt: String
  department_lte: String
  department_gt: String
  department_gte: String
  department_contains: String
  department_not_contains: String
  department_starts_with: String
  department_not_starts_with: String
  department_ends_with: String
  department_not_ends_with: String
  facultyID: String
  facultyID_not: String
  facultyID_in: [String!]
  facultyID_not_in: [String!]
  facultyID_lt: String
  facultyID_lte: String
  facultyID_gt: String
  facultyID_gte: String
  facultyID_contains: String
  facultyID_not_contains: String
  facultyID_starts_with: String
  facultyID_not_starts_with: String
  facultyID_ends_with: String
  facultyID_not_ends_with: String
  AND: [ProblemWhereInput!]
}

input ProblemWhereUniqueInput {
  id: ID
}

type Query {
  branch(where: BranchWhereUniqueInput!): Branch
  branches(where: BranchWhereInput, orderBy: BranchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Branch]!
  branchesConnection(where: BranchWhereInput, orderBy: BranchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BranchConnection!
  campus(where: CampusWhereUniqueInput!): Campus
  campuses(where: CampusWhereInput, orderBy: CampusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Campus]!
  campusesConnection(where: CampusWhereInput, orderBy: CampusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CampusConnection!
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  courseInstance(where: CourseInstanceWhereUniqueInput!): CourseInstance
  courseInstances(where: CourseInstanceWhereInput, orderBy: CourseInstanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseInstance]!
  courseInstancesConnection(where: CourseInstanceWhereInput, orderBy: CourseInstanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseInstanceConnection!
  global(where: GlobalWhereUniqueInput!): Global
  globals(where: GlobalWhereInput, orderBy: GlobalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Global]!
  globalsConnection(where: GlobalWhereInput, orderBy: GlobalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GlobalConnection!
  problem(where: ProblemWhereUniqueInput!): Problem
  problems(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem]!
  problemsConnection(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProblemConnection!
  question(where: QuestionWhereUniqueInput!): Question
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  recovery(where: RecoveryWhereUniqueInput!): Recovery
  recoveries(where: RecoveryWhereInput, orderBy: RecoveryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recovery]!
  recoveriesConnection(where: RecoveryWhereInput, orderBy: RecoveryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecoveryConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Question {
  id: ID!
  course: String!
  name: String!
  desc: String!
  exp: String!
  opt: Options!
  ans: String!
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  id: ID
  course: String!
  name: String!
  desc: String!
  exp: String!
  opt: OptionsCreateOneInput!
  ans: String!
}

type QuestionEdge {
  node: Question!
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  course_ASC
  course_DESC
  name_ASC
  name_DESC
  desc_ASC
  desc_DESC
  exp_ASC
  exp_DESC
  ans_ASC
  ans_DESC
}

type QuestionPreviousValues {
  id: ID!
  course: String!
  name: String!
  desc: String!
  exp: String!
  ans: String!
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
  AND: [QuestionSubscriptionWhereInput!]
}

input QuestionUpdateInput {
  course: String
  name: String
  desc: String
  exp: String
  opt: OptionsUpdateOneRequiredInput
  ans: String
}

input QuestionUpdateManyMutationInput {
  course: String
  name: String
  desc: String
  exp: String
  ans: String
}

input QuestionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  course: String
  course_not: String
  course_in: [String!]
  course_not_in: [String!]
  course_lt: String
  course_lte: String
  course_gt: String
  course_gte: String
  course_contains: String
  course_not_contains: String
  course_starts_with: String
  course_not_starts_with: String
  course_ends_with: String
  course_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  exp: String
  exp_not: String
  exp_in: [String!]
  exp_not_in: [String!]
  exp_lt: String
  exp_lte: String
  exp_gt: String
  exp_gte: String
  exp_contains: String
  exp_not_contains: String
  exp_starts_with: String
  exp_not_starts_with: String
  exp_ends_with: String
  exp_not_ends_with: String
  opt: OptionsWhereInput
  ans: String
  ans_not: String
  ans_in: [String!]
  ans_not_in: [String!]
  ans_lt: String
  ans_lte: String
  ans_gt: String
  ans_gte: String
  ans_contains: String
  ans_not_contains: String
  ans_starts_with: String
  ans_not_starts_with: String
  ans_ends_with: String
  ans_not_ends_with: String
  AND: [QuestionWhereInput!]
}

input QuestionWhereUniqueInput {
  id: ID
}

type Recovery {
  id: ID!
  token: String!
  username: String!
  email: String!
}

type RecoveryConnection {
  pageInfo: PageInfo!
  edges: [RecoveryEdge]!
  aggregate: AggregateRecovery!
}

input RecoveryCreateInput {
  id: ID
  token: String!
  username: String!
  email: String!
}

type RecoveryEdge {
  node: Recovery!
  cursor: String!
}

enum RecoveryOrderByInput {
  id_ASC
  id_DESC
  token_ASC
  token_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
}

type RecoveryPreviousValues {
  id: ID!
  token: String!
  username: String!
  email: String!
}

type RecoverySubscriptionPayload {
  mutation: MutationType!
  node: Recovery
  updatedFields: [String!]
  previousValues: RecoveryPreviousValues
}

input RecoverySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecoveryWhereInput
  AND: [RecoverySubscriptionWhereInput!]
}

input RecoveryUpdateInput {
  token: String
  username: String
  email: String
}

input RecoveryUpdateManyMutationInput {
  token: String
  username: String
  email: String
}

input RecoveryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  AND: [RecoveryWhereInput!]
}

input RecoveryWhereUniqueInput {
  id: ID
  token: String
}

type Subscription {
  branch(where: BranchSubscriptionWhereInput): BranchSubscriptionPayload
  campus(where: CampusSubscriptionWhereInput): CampusSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  courseInstance(where: CourseInstanceSubscriptionWhereInput): CourseInstanceSubscriptionPayload
  global(where: GlobalSubscriptionWhereInput): GlobalSubscriptionPayload
  problem(where: ProblemSubscriptionWhereInput): ProblemSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  recovery(where: RecoverySubscriptionWhereInput): RecoverySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag {
  name: String!
  id: String!
}

input TagCreateInput {
  name: String!
  id: String!
}

input TagCreateManyInput {
  create: [TagCreateInput!]
}

input TagRestrictedWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  AND: [TagRestrictedWhereInput!]
}

input TagScalarWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

input TagUpdateManyDataInput {
  name: String
  id: String
}

input TagUpdateManyInput {
  create: [TagCreateInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  id: String
  id_not: String
  id_in: [String!]
  id_not_in: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  AND: [TagWhereInput!]
}

type User {
  username: String!
  password: String!
  name: String!
  campus: String
  department: String
  dob: DateTime
  email: String!
  level: Int!
  id: ID!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  password: String!
  name: String!
  campus: String
  department: String
  dob: DateTime
  email: String!
  level: Int!
  id: ID
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  campus_ASC
  campus_DESC
  department_ASC
  department_DESC
  dob_ASC
  dob_DESC
  email_ASC
  email_DESC
  level_ASC
  level_DESC
  id_ASC
  id_DESC
}

type UserPreviousValues {
  username: String!
  password: String!
  name: String!
  campus: String
  department: String
  dob: DateTime
  email: String!
  level: Int!
  id: ID!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  password: String
  name: String
  campus: String
  department: String
  dob: DateTime
  email: String
  level: Int
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  name: String
  campus: String
  department: String
  dob: DateTime
  email: String
  level: Int
}

input UserWhereInput {
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  campus: String
  campus_not: String
  campus_in: [String!]
  campus_not_in: [String!]
  campus_lt: String
  campus_lte: String
  campus_gt: String
  campus_gte: String
  campus_contains: String
  campus_not_contains: String
  campus_starts_with: String
  campus_not_starts_with: String
  campus_ends_with: String
  campus_not_ends_with: String
  department: String
  department_not: String
  department_in: [String!]
  department_not_in: [String!]
  department_lt: String
  department_lte: String
  department_gt: String
  department_gte: String
  department_contains: String
  department_not_contains: String
  department_starts_with: String
  department_not_starts_with: String
  department_ends_with: String
  department_not_ends_with: String
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  level: Int
  level_not: Int
  level_in: [Int!]
  level_not_in: [Int!]
  level_lt: Int
  level_lte: Int
  level_gt: Int
  level_gte: Int
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  username: String
  id: ID
}
`